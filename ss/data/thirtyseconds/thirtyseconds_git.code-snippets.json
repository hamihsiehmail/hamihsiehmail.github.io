{
  "hgit Small pull requests 30-seconds-of-code": {
    "prefix": "hgit Small pull requests 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The pull requests that get reviewed more thoroughly and confidently and are most often prioritized by developers with limited time are the smallest ones. Make sure you separate concerns into different pull requests (e.g. refactoring and feature implementation), while also keeping commits atomic and well-documented to make the changes easier to understand and review.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Good descriptions 30-seconds-of-code": {
    "prefix": "hgit Good descriptions 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Always take the time to describe your code and any related tasks in your pull request. Explain the feature you are implementing or the bug you are fixing and provide images and steps to reproduce, if applicable. Note decisions made during implementation, your approach, as well as any limitations, findings and points of interest that might help others better understand your code.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Rebase onto master 30-seconds-of-code": {
    "prefix": "hgit Rebase onto master 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Always rebase your pull requests onto the `master` branch of the repository. This way you can always test your code against the latest changes and resolve merge conflicts, minimizing issues that might arise later on. Apart from that, reviewers will not have to deal with missing features or bug fixes that might have been deployed already, which can considerably speed up review times.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Review it yourself 30-seconds-of-code": {
    "prefix": "hgit Review it yourself 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Before submitting your pull request for review, always take the time to review it yourself. That way you can handle some low-hanging fruits (typos, easy optimizations, leftover code etc.) and check things you would in other people's pull requests. Self-reviewing has the added benefit of allowing you to reason about decisions and realize which ones might need clarification.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Respond to reviews 30-seconds-of-code": {
    "prefix": "hgit Respond to reviews 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Set some time aside to respond to reviews after submitting your pull request. Handle anything you can as soon as possible and start discussion whenever necessary to arrive to a solution. Use `--fixup` for changes suggested in review comments or add new commits to help reviewers parse new changes more easily. Finally, assume good intentions, be polite and thank your peers.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Creating aliases 30-seconds-of-code": {
    "prefix": "hgit Creating aliases 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Use the command below to create aliases, replacing `<alias>` with the name of the alias and `<command>` with the command to be aliased:\r",
      "\r",
      "```shell\r",
      "git config --global alias.<alias> <command>\r",
      "```\r",
      "\r",
      "Additionally, you can use [edit the configuration file](/git/s/edit-config) and add many aliases all at once.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Useful aliases 30-seconds-of-code": {
    "prefix": "hgit Useful aliases 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "```editorconfig\r",
      "[alias]\r",
      "  co = checkout\r",
      "  cob = checkout -b\r",
      "  coo = !git fetch && git checkout\r",
      "  br = branch\r",
      "  brd = branch -d\r",
      "  st = status\r",
      "  aa = add -A .\r",
      "  unstage = reset --soft HEAD^\r",
      "  cm = commit -m\r",
      "  amend = commit --amend -m\r",
      "  fix = commit --fixup\r",
      "  undo = reset HEAD~1\r",
      "  rv = revert\r",
      "  cp = cherry-pick\r",
      "  pu = !git push origin `git branch --show-current`\r",
      "  fush = push -f\r",
      "  mg = merge --no-ff\r",
      "  rb = rebase\r",
      "  rbc = rebase --continue\r",
      "  rba = rebase --abort\r",
      "  rbs = rebase --skip\r",
      "  rom = !git fetch && git rebase -i origin/master --autosquash\r",
      "  save = stash push\r",
      "  pop = stash pop\r",
      "  apply = stash apply\r",
      "  rl = reflog\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Branches that contain a commit 30-seconds-of-code": {
    "prefix": "hgit Branches that contain a commit 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "As usual, Git has a simple solution to this problem. Using `git branch` with the `--contains` flag will print all the **branches containing a specific commit**.\r",
      "\r",
      "```shell\r",
      "# Syntax: git branch --contains <commit>\r",
      "\r",
      "git branch --contains 3050fc0\r",
      "# development\r",
      "# network-fixes\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Branches that don't contain a commit 30-seconds-of-code": {
    "prefix": "hgit Branches that don't contain a commit 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Similarly, you can look for **branches that don't contain a specific commit** by using the `--no-contains` flag.\r",
      "\r",
      "```shell\r",
      "# Syntax: git branch --no-contains <commit>\r",
      "\r",
      "git branch --no-contains 3050fc0\r",
      "# master\r",
      "# adapter-feature\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Fast-forward merge 30-seconds-of-code": {
    "prefix": "hgit Fast-forward merge 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "As stated above, Git's default is to use fast-forward merge. It will take the commits from the branch being merged and place them at the tip of the branch you're merging into. This creates a **linear history**, which is also the main advantage of using fast-forward merge. If you want to emulate fast-forward merge on GitHub, you can use the \"Rebase and merge\" option.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Non fast-forward merge 30-seconds-of-code": {
    "prefix": "hgit Non fast-forward merge 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "GitHub, on the other hand, uses non fast-forward merge by default. It will create a merge commit at the tip of the branch you're merging into, optionally referencing the branch being merged in the commit message. This has the advantage of **keeping track of branches** more explicitly than fast-forward merge. If you want to get the same behavior in a Git terminal, you can use the `--no-ff` flag.\r",
      "\r",
      "As a side note, you can configure the default Git merge behavior, using `git config`. To learn how to do so, you can take a look at the [relevant snippet](/git/s/disable-fast-forward).\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Notes: 30-seconds-of-code": {
    "prefix": "hgit Notes: 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- To correctly attribute a commit to a co-author, you must use the email associated with their GitHub account.\r",
      "- If a person's email is private, you can use their GitHub-provided `no-reply` email.\r",
      "- Leave one or preferably two empty lines before any `Co-authored-by` trailers.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Merging a branch 30-seconds-of-code": {
    "prefix": "hgit Merging a branch 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In order to merge a branch, you want to **switch to the target branch** first, using `git checkout`. Then, you can use `git merge` to **merge the source branch into the target branch**.\r",
      "\r",
      "```shell\r",
      "# Syntax:\r",
      "#  git checkout <target-branch>\r",
      "#  git merge <source-branch>\r",
      "\r",
      "git checkout master\r",
      "git merge patch-1 # Merges the `patch-1` branch into `master`\r",
      "```\r",
      "\r",
      "By default, Git will use [fast-forward merge](/git/s/fast-forward-merge) to merge the branch. This means that it will create a **linear history**, by placing the commits from the source branch at the tip of the target branch.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Creating a merge commit 30-seconds-of-code": {
    "prefix": "hgit Creating a merge commit 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "If, instead, you want to **create a merge commit**, you can use the `--no-ff` flag when merging. This will create a merge commit at the tip of the target branch, optionally referencing the source branch in the commit message. The rest of the process remains the same.\r",
      "\r",
      "```shell\r",
      "# Syntax:\r",
      "#  git checkout <target-branch>\r",
      "#  git merge --no-ff -m <message> <source-branch>\r",
      "\r",
      "git checkout master\r",
      "git merge --no-ff -m \"Merge patch-1\" patch-1\r",
      "# Merges the `patch-1` branch into `master` and creates a commit\r",
      "# with the message \"Merge patch-1\"\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Push changes to remote 30-seconds-of-code": {
    "prefix": "hgit Push changes to remote 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In order to push changes to the remote repository, you'll first have to set up a remote tracking branch. This is often done by using `git branch` with the `-u` flag. Then, you can use `git push` to push the latest changes from the local branch to the remote.\r",
      "\r",
      "```shell\r",
      "# Syntax:\r",
      "#  git branch -u <remote>/<branch>\r",
      "#  git push\r",
      "\r",
      "git branch -u origin/patch-1\r",
      "git push\r",
      "# The remote `patch-1` branch is now up to date with the local branch\r",
      "```\r",
      "\r",
      "Alternatively, you can use the `--set-upstream` flag with `git push` to set up a remote tracking branch and push the latest changes in one go. This is only possible if the remote branch doesn't exist yet.\r",
      "\r",
      "```shell\r",
      "# Syntax: git push --set-upstream <remote> <branch>\r",
      "\r",
      "git push --set-upstream origin patch-1\r",
      "# The remote `patch-1` branch is now up to date with the local branch\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Pull changes from remote 30-seconds-of-code": {
    "prefix": "hgit Pull changes from remote 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Similar to pushing changes to a remote repository, you'll have to set up a remote tracking branch before you can pull changes from it. Luckily, `git checkout` is smart enough to do this for you, provided there is no local branch with the same name as the remote one. Then, you can use `git pull` to fetch and apply the latest changes from the remote.\r",
      "\r",
      "```shell\r",
      "# Syntax:\r",
      "#  git checkout <branch>\r",
      "#  git pull\r",
      "\r",
      "git checkout patch-1\r",
      "git pull\r",
      "# The local `patch-1` branch is now up to date with the remote branch `patch-1`\r",
      "```\r",
      "\r",
      "In case you have a local branch with the same name as the remote one and don't want to overwrite it, things are a bit more complicated. You'll have to use `git checkout` with the `-b` flag to specify the local branch's name and the `--track` flag to specify the remote branch's name. Then, you can use `git pull` as usual.\r",
      "\r",
      "```shell\r",
      "# Syntax:\r",
      "#  git checkout -b <local-branch> --track <remote>/<branch>\r",
      "#  git pull\r",
      "\r",
      "git checkout -b patch-one --track origin/patch-1\r",
      "git pull\r",
      "# The local `patch-one` branch is now up to date with the remote branch `patch-1`\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Rewind to a commit 30-seconds-of-code": {
    "prefix": "hgit Rewind to a commit 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To rewind back to a specific commit, you can use `git reset`. This command will **uncommit and unstage changes**, but leave them in the working directory. You can use the `--hard` flag to **uncommit, unstage and delete** changes instead.\r",
      "\r",
      "```shell\r",
      "# Syntax: git reset [--hard] <commit>\r",
      "\r",
      "git reset 3050fc0\r",
      "# Rewinds back to `3050fc0` but keeps changes in the working directory\r",
      "\r",
      "git reset --hard c0d30f3\r",
      "# Rewinds back to `c0d30f3` and deletes changes\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Rewind back n commits 30-seconds-of-code": {
    "prefix": "hgit Rewind back n commits 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "You can also use `git reset` to rewind back a **given number of commits**. To do so, you can use the `HEAD~<n>` syntax, where `<n>` is the number of commits you want to rewind back.\r",
      "\r",
      "```shell\r",
      "# Syntax: git reset [--hard] HEAD~<n>\r",
      "\r",
      "git reset HEAD~5\r",
      "# Rewinds back 5 commits but keeps changes in the working directory\r",
      "\r",
      "git reset --hard HEAD~3\r",
      "# Rewinds back 3 commits and deletes changes\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Notes 30-seconds-of-code": {
    "prefix": "hgit Notes 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The `--hard` flag is considered a destructive action, which means you should be extra careful when using it. If things go wrong, you might be able to recover your changes by [viewing the reference log](/git/s/view-undo-history).\r",
      "\r",
      "In case you've already pushed some changes to a remote repository, you might not want to rewrite history, especially if other people have already pulled your changes. In that case, you can use `git revert` to [undo a commit without rewriting history](/git/s/undo-commit-without-rewriting-history).\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Create a commit by a different author 30-seconds-of-code": {
    "prefix": "hgit Create a commit by a different author 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "As long as you have the author's information, you can create a commit by them. Using the `--author` option for `git commit` will allow you to **create a new commit by a different author**.\r",
      "\r",
      "```shell\r",
      "# Syntax: git commit --author=\"<name> <email>\"\r",
      "\r",
      "# Make some changes to files\r",
      "git add .\r",
      "git commit -m \"Fix the network bug\" --author=\"Duck Quackers <cool.duck@qua.ck>\"\r",
      "# Creates a commit by `Duck Quackers`\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Change the last commit's author 30-seconds-of-code": {
    "prefix": "hgit Change the last commit's author 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In case you want to **change the author of the last commit**, you only need to add the `--amend` flag to the previous command. You can learn more about updating commits in [our guide on amending commits](/git/s/update-commit-message-or-contents).\r",
      "\r",
      "```shell\r",
      "# Syntax: git commit --amend --author=\"<name> <email>\"\r",
      "\r",
      "# Make some changes to files\r",
      "git add .\r",
      "git commit -m \"Fix the network bug\" --author=\"Duck Quackers <cool.duck@qua.ck>\"\r",
      "# Creates a commit by `Duck Quackers`\r",
      "\r",
      "# Edit or add files\r",
      "git add .\r",
      "git commit --amend --author=\"Quack Duckers <ducky-o@qua.ck>\"\r",
      "# The last commit is now updated and the author is `Quack Duckers`\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Caveats 30-seconds-of-code": {
    "prefix": "hgit Caveats 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Changing the author of a commit will also change its **SHA-1 checksum**. If you've already pushed the commit to a remote repository, you will need to force push the updated commit to the remote.\r",
      "\r",
      "Additionally, if your remote repository is configured to only accept **signed commits**, you might be unable to sign the commit unless you have the original author's GPG key.\r",
      "\r",
      "Finally, you can't use `--author` to add **multiple authors** to a commit. If you want to do so, you can find more information in [the relevant snippet](/git/s/github-co-authors).\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Revert a commit 30-seconds-of-code": {
    "prefix": "hgit Revert a commit 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "As you might have guessed, `git revert` is the command you're looking for. Using this command, you can **revert a commit**, creating a new commit with the inverse of the commit's changes.\r",
      "\r",
      "```shell\r",
      "# Syntax: git revert <commit>\r",
      "\r",
      "git revert 3050fc0\r",
      "# Reverts the commit `3050fc0` and creates a new commit\r",
      "# with the inverse of its changes\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Revert the last commit 30-seconds-of-code": {
    "prefix": "hgit Revert the last commit 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The **latest commit** can be references using the `HEAD` pointer. So, to revert the last commit, you can simply use `git revert HEAD`.\r",
      "\r",
      "```shell\r",
      "# Syntax: git revert HEAD\r",
      "\r",
      "git revert HEAD\r",
      "# Reverts the last commit and creates a new commit\r",
      "# with the inverse of its changes\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Change the last commit's message 30-seconds-of-code": {
    "prefix": "hgit Change the last commit's message 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "If you only want to change the last commit's message, you can use `--amend` and simply add the `-m` option followed by the new message. This will replace the last commit's message with the new one.\r",
      "\r",
      "```shell\r",
      "# Syntax: git commit --amend -m <message>\r",
      "\r",
      "git add .\r",
      "git commit -m \"Fix the network bug\"\r",
      "# Creates the commit: 3050fc0 Fix network bug\r",
      "\r",
      "git commit --amend -m \"Fix the network bug\"\r",
      "# The last commit's message is now \"Fix the network bug\"\r",
      "# This also changes its SHA-1 checksum\r",
      "```\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Change the last commit's contents 30-seconds-of-code": {
    "prefix": "hgit Change the last commit's contents 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "If you want to change the last commit's contents, you can use `--amend` after staging the changes you want to add to the last commit. This will add any staged changes to the last commit, without changing its message.\r",
      "\r",
      "If you want to keep the same commit message and only add the staged changes, you can use `--no-edit` to prevent Git from opening the default editor to change the commit message.\r",
      "\r",
      "```shell\r",
      "# Syntax: git commit --amend --no-edit\r",
      "\r",
      "git add .\r",
      "git commit -m \"Fix the network bug\"\r",
      "# Creates the commit: 3050fc0 Fix network bug\r",
      "\r",
      "# Edit or add files\r",
      "git add .\r",
      "git commit --amend --no-edit\r",
      "# The last commit includes the edited/added files\r",
      "# This also changes its SHA-1 checksum\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Short summary of all commits 30-seconds-of-code": {
    "prefix": "hgit Short summary of all commits 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "One of these is `--oneline`, which is actually a shorthand for `--pretty=oneline --abbrev-commit`. It prints a short summary of all commits, with each commit being printed on a single line.\r",
      "\r",
      "```shell\r",
      "git log --oneline\r",
      "# d540ba1 Merge network bug fix\r",
      "# 3050fc0 Fix network bug\r",
      "# c191f90 Initial commit\r",
      "```\r",
      "\r",
      "Notice the short, 7-character commit identifiers. This is because of the `--abbrev-commit` option, which abbreviates the commit SHA-1 checksum to 7 characters. This shorter string is enough to uniquely identify a commit.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hgit Short summary of commits without merges 30-seconds-of-code": {
    "prefix": "hgit Short summary of commits without merges 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Other options can be used in conjunction with `--oneline` to further customize the output. For example, you can use `--no-merges` to exclude merge commits from the output.\r",
      "\r",
      "```shell\r",
      "git log --oneline --no-merges\r",
      "# 3050fc0 Fix network bug\r",
      "# c191f90 Initial commit\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  }
}