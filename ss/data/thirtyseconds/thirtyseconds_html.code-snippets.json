{
  "hhtml Use semantic HTML 30-seconds-of-code": {
    "prefix": "hhtml Use semantic HTML 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "HTML5 introduced a variety of new semantic HTML elements to help replace the much dreaded `<div>`, such as `<section>`, `<main>`, `<article>`, `<nav>` etc. When developing a website, you should understand what each part of your layout represents and try to use the appropriate element for it.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Use color correctly 30-seconds-of-code": {
    "prefix": "hhtml Use color correctly 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "[WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) specifies a minimum contrast ratio of `4.5:1` between text and background (viewable in Chrome Developer Tools), so you should always design with that in mind. Additionally, remember that color should be used meaningfully and sparsely to avoid confusion and information overload.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Caption images and video 30-seconds-of-code": {
    "prefix": "hhtml Caption images and video 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Try to provide `alt` attributes for your `<img>` elements, so that screenreaders don't read the `src` attribute. You can use empty `alt` attributes for decorative images, which will inform screenreaders to skip them. Similarly, try to provide closed captions for any video content on your website.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Show and tell 30-seconds-of-code": {
    "prefix": "hhtml Show and tell 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Using icons and colors to indicate state, highlight or provide context is very common and provides a nice user experience. However, icons and colors alone might not be accessible for everyone, so make sure to support them with the appropriate text literals, catering to all of your users in the process.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Be consistent 30-seconds-of-code": {
    "prefix": "hhtml Be consistent 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Elements with similar meaning and/or functionality should look similar across your website. This is especially true for `<a>` and `<button>` elements and their respective states as users will have to be able to identify easily what elements they can interact with and anticipate their behavior.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Label your inputs 30-seconds-of-code": {
    "prefix": "hhtml Label your inputs 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Any kind of `<input>` element should be labelled appropriately, using either a `<label>` wrapper, the `for` attribute or an `aria-label` attribute. Do not rely on `placeholder` attributes to convey meaning about your `<input>` elements as this will cause problems for users on screenreaders.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Design responsively 30-seconds-of-code": {
    "prefix": "hhtml Design responsively 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Responsiveness is often thought in terms of screen size or mobile vs desktop, but there are many different devices where a user could browse your website. Try catering to any and all of them by providing ways to navigate and use your application via mouse, keyboard, thumb or any combination of the three.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml Organize your content 30-seconds-of-code": {
    "prefix": "hhtml Organize your content 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "A website's layout should be easy to scan, understand and find the content that is relevant to the user. Good organization with clear sections and properly grouped content provides a better user experience for all users, regardless of device or accessibility needs.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml No attributes 30-seconds-of-code": {
    "prefix": "hhtml No attributes 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "More often than not, a plain `<script>` tag without attributes is what most people tend to start with. This implements the default browser behavior. The HTML will be parsed until the script tag is encountered. At this point, HTML parsing will be paused and the script will be loaded. The script will then be executed before HTML parsing can resume.\r",
      "\r",
      "```html\r",
      "<script src=\"script.js\"></script>\r",
      "```\r",
      "\r",
      "As you can see, this method can cause a long pause in HTML parsing, resulting in a degraded user experience.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml The async attribute 30-seconds-of-code": {
    "prefix": "hhtml The async attribute 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To avoid a long pause in HTML parsing, the `async` attribute can be leveraged. This ensures that, when the script is encountered, parsing doesn't pause right away. Instead, the script is loaded in the background and only the HTML parsing is paused to execute it. HTML parsing resumes as usual after script execution is completed.\r",
      "\r",
      "```html\r",
      "<script src=\"script.js\" async></script>\r",
      "```\r",
      "\r",
      "While the `async` attribute takes steps to mitigate the issue mentioned previously, it comes with an important caveat. Scripts loaded this way are not guaranteed to execute in the order specified, but rather as they become available when they are loaded.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml The defer attribute 30-seconds-of-code": {
    "prefix": "hhtml The defer attribute 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Finally, the `defer` attribute builds on top of the previous behavior to guarantee order of execution for scripts. As previously, scripts are loaded in the background as they are encountered. When the HTML parsing finishes, they are then executed in order.\r",
      "\r",
      "```html\r",
      "<script src=\"script.js\" defer></script>\r",
      "```\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml How to write good alt text 30-seconds-of-code": {
    "prefix": "hhtml How to write good alt text 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The `alt` attribute should be used to describe the image in a way that makes sense to **someone who cannot see it**. Descriptions must be accurate and concise. Some screen readers are known to cut off descriptions after **125 characters**, so it is best to keep descriptions short.\r",
      "\r",
      "Let's look at an example. Imagine that you want to describe an image of a boat sailing on the ocean. You could use the following `alt` attribute:\r",
      "\r",
      "```html\r",
      "<img src=\"boat.jpg\" alt=\"A boat sailing on the ocean\">\r",
      "```\r",
      "\r",
      "In this example, we've tried to describe the image as if we were describing to someone over the phone. Notice how we didn't use the word \"picture\" or \"image\" in the description. Additionally, we didn't simply say \"boat\" because that doesn't provide enough context.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "hhtml What if the image is purely decorative? 30-seconds-of-code": {
    "prefix": "hhtml What if the image is purely decorative? 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "If an image is **purely decorative**, then it is best to leave the `alt` attribute **empty**. This will tell screen readers to skip over the image.\r",
      "\r",
      "```html\r",
      "<img src=\"decorative.jpg\" alt=\"\">\r",
      "```\r",
      "\r",
      "Notice in this example that we still included the `alt` attribute, but we left it empty. This is different from not including the `alt` attribute at all. If you don't include the `alt` attribute, then screen readers will read the image's file name instead.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  }
}