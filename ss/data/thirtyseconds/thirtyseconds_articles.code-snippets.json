{
  "harticles  Craft user-friendly URLs and map the appropriately 30-seconds-of-code": {
    "prefix": "harticles  Craft user-friendly URLs and map the appropriately 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "First and foremost, start at the very beginning, which is your **URL slugs**. For URL slugs the rule is that you want them to be human-readable, with words separated by dashes and with no random letters or digits added. Secondly, it's a good idea to make sure that parts of your URLs match to a **logical structure** in your website (e.g. `/blog/posts/awesome-list-of-seo-tips`). Finally, take the time to build a sitemap and redirect any broken or old URLs to new ones. This will help reduce 404 pages.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Use structured data to help Google understand your pages 30-seconds-of-code": {
    "prefix": "harticles Use structured data to help Google understand your pages 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "**Structured data** is what Google uses to power its **featured snippets**, those little cards that appear at the top of certain searches. It's a good idea to set up structured data for your pages, which will help you rank higher in search results and possibly even land a featured snippet every once in a while. Just make sure to find the appropriate structured data type and include it in your page and you should be good to go.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Set up Google Analytics and Google Search Console 30-seconds-of-code": {
    "prefix": "harticles Set up Google Analytics and Google Search Console 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "This is hardly a new tip, but I think it deserves a spot on the list, as both of these tools are extremely important. **Google Analytics** allows you to track user behavior and gather data that can help you identify problems and opportunities, while **Google Search Console** is helpful for figuring out what users are searching for before landing on your website.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Keep an eye on your markup, performance and accessibility 30-seconds-of-code": {
    "prefix": "harticles Keep an eye on your markup, performance and accessibility 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Last but not least, something that is probably already on your list, is **optimizing your code**. This includes everything from writing semantic markup and keeping requests to a minimum to optimizing for all device types, making your website accessible and ensuring fast load times. Keep in mind that websites have many moving parts that evolve and change over time, so it's a good idea to audit your website often with a tool like Lighthouse.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles CSS Peeper 30-seconds-of-code": {
    "prefix": "harticles CSS Peeper 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "[CSS Peeper](https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk?hl=en) is an all-in-one tool for CSS inspection that allows you to quickly peek at the styles, fonts, color palettes and assets of any website you want.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles React Developer Tools 30-seconds-of-code": {
    "prefix": "harticles React Developer Tools 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "[React Developer Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) is the de facto extension when working with React, providing all the necessary inspection tools for your React applications.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles LastPass 30-seconds-of-code": {
    "prefix": "harticles LastPass 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "[LastPass](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en) keeps your accounts and API keys secure, by providing a free password manager complete with password generation and password-protected notes.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles uBlock Origin 30-seconds-of-code": {
    "prefix": "harticles uBlock Origin 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "[uBlock Origin](https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=en) is a simple yet effective ad blocker extension that you can just install and forget about, as it keeps your browsing experience ad-free.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles VisBug 30-seconds-of-code": {
    "prefix": "harticles VisBug 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "[VisBug](https://chrome.google.com/webstore/detail/visbug/cdockenadnadldjbbgcallicgledbeoc?hl=en) allows you to tweak website designs on the fly, using very intuitive controls and tools, without having to delve into any code at all.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles JSON Viewer 30-seconds-of-code": {
    "prefix": "harticles JSON Viewer 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "[JSON Viewer](https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en) provides some much needed syntax highlighting and style customization to JSON responses, which are nowadays very commonplace in most web APIs.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles EditThisCookie 30-seconds-of-code": {
    "prefix": "harticles EditThisCookie 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "[EditThisCookie](https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en) is a powerful cookie manager extension, that allows you to add, delete, edit and even export and import cookies quickly and efficiently.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Set up your work environment 30-seconds-of-code": {
    "prefix": "harticles Set up your work environment 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Working from home has its perks, but nothing beats a well-designed office space where everything is set up with only one purpose in mind: working. Figure out your home office, experiment with different settings and understand what works best for you as soon as possible. An ideal working space is comfortable, quiet and has the right equipment for you.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Establish ground rules 30-seconds-of-code": {
    "prefix": "harticles Establish ground rules 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Most likely you are not living alone, so you have to establish some ground rules with your roommate or significant other. It's up to you to drive the point home that during working hours you are, for the most part, not home. Sure, you can answer the door if you expect a delivery, but that's pretty much as far as you can go. People should not bother you during working hours, unless absolutely necessary, as small distractions pile up fast.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Inform others of your availability 30-seconds-of-code": {
    "prefix": "harticles Inform others of your availability 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "It's important to let people know that you are online and working or that you are taking a short break for lunch. Remember that you are still part of a team that requires coordination and others probably depend on your work to some extent. Remember to update your status as necessary to make collaboration easier.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Socialize with coworkers 30-seconds-of-code": {
    "prefix": "harticles Socialize with coworkers 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Working from home can lead to feelings of loneliness, disconnect, isolation which can quickly spin out of control and lead to depression. Communicate with people on your team as if you were in the same room. A healthy amount of communication will help you feel more like you are all working together rather than each one on their own.\r",
      "\r",
      "5. Be your best professional self\r",
      "Nobody might be watching you at home, so you can theoretically slack off as much as you like in your pajamas, but that's not very professional. Try to dress appropriately in case you join a video call and behave professionally, so no inappropriate websites or hours upon hours of checking social media. Ask yourself if someone in a shared office space would do whatever it is you are doing and, if the answer is no, stop doing it.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Plan your daily and weekly tasks 30-seconds-of-code": {
    "prefix": "harticles Plan your daily and weekly tasks 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Having a coherent working plan helps you organize your time and prioritize important tasks above trivial ones. It also helps to put things into perspective and have a general idea of what other people on the team are working on. Plan ahead of time together with your team and keep each other posted on the progress of each task. Short term plans help you get through the day, long term plans help everyone meet their deadlines.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Use the right collaboration tools 30-seconds-of-code": {
    "prefix": "harticles Use the right collaboration tools 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Working from home has its own challenges and issues, so try to find the right tools for the job. Slack, Skype, Zoom, Hangouts are great for communication. Design tools such as Figma or Sketch cloud help you communicate designs quickly and effectively. GitHub is the perfect tool for code collaboration and VS Code has an extension (Live Share) for sharing your code editors. Communicate with your team, figure out your needs and pick tools that work for you.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Maintain regular hours 30-seconds-of-code": {
    "prefix": "harticles Maintain regular hours 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "It's as easy to forget about breaks as it is to start working late. Try to set a schedule that sits well with your team and stick to it. If you would work 9 to 5 in a regular office environment, do the same at home. Take regular breaks, do not forget to sign off when put in your daily hours and come back tomorrow. After all, it's business as usual.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles How we got here 30-seconds-of-code": {
    "prefix": "harticles How we got here 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "If I had to guess, I'd blame the _fake it till you make it_ mentality first and foremost for this situation. While this phrase can be motivating, it's often taken too seriously, leading to bad advice and misinformation spreading like wildfire. When someone pretends to be an expert, they may inadvertently give advice that is outdated, incomplete or simply incorrect.\r",
      "\r",
      "Another culprit is the fact that many developers are **self-taught**. The internet has given us access to a wealth of information, but it's also made it easier than ever to **skip over the basics**. This can be especially dangerous when it comes to security, where a single mistake can lead to a major breach.\r",
      "\r",
      "Last but not least, **lack of experience** can also be a factor. While it's true that experience is not everything, it's more likely that you'll be exposed to different situations, problems and opinions over time, which will help you form a more **balanced view** of things. This sort of exposure is something that you simply don't have when you're just starting out.\r",
      "\r",
      "Combining all of this with the _learning in public_ mentality that is often pushed to new developers and things can easily get out of hand. Thus, it's imperative that we learn to spot bad advice.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Spotting bad advice 30-seconds-of-code": {
    "prefix": "harticles Spotting bad advice 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To avoid falling for bad advice, it's important to understand the **three types of knowledge**: what you know you know, what you know you don't know, and what you don't know you don't know. It's important to acknowledge that there are many things we don't know, and be humble enough to admit it. Even the most experienced developers have gaps in their knowledge.\r",
      "\r",
      "So how can you avoid falling for bad advice? One way is to pick **reputable sources**, such as books, articles, or experts in the field. However, even reputable sources can be **biased or outdated**. That's why it's important to **do your own research**, experiment with code, and develop your **critical thinking skills**.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Some self-reflection 30-seconds-of-code": {
    "prefix": "harticles Some self-reflection 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "As my writing (and this very post) is a source of advice in itself, I suggest you take it with a grain of salt, too. I'm not immune to this phenomenon and I've made many mistakes in the past, hopefully without causing too much harm. I've also followed and reproduced bad advice at times, privately or publicly. Here's a few examples of bad advice I've fallen for:\r",
      "\r",
      "- **Coercion is always bad**, except it isn't. It's a language feature that can be useful in certain situations and any confusion around it stems from not fully understanding how it works.\r",
      "- **Never use classes in JS**, because they're syntactic sugar on top of prototypes. This might be true, but to a beginner coming from an object-oriented background, it feels a bit like gatekeeping.\r",
      "- **Avoid useEffect in React**, opting for third-party hooks instead. Those hooks are certainly useful, but they use `useEffect` under the hood, so you'll eventually need to learn about it one way or the other.\r",
      "\r",
      "I've definitely made my fair share of mistakes, and I'm sure I'll make many more in the future. However, I'm always trying to learn from them and improve my writing. I'm also trying to be **more mindful of the advice I give**, and I hope you'll do the same if you're sharing your knowledge with others.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Conclusion 30-seconds-of-code": {
    "prefix": "harticles Conclusion 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Technical debt is a natural, unavoidable part of software development. Miscommunication and lack of understanding can lead to it, resulting in lowered velocity and morale. Luckily, a bit of awareness, good communication and an actionable process can help reduce it and keep it in check.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles You learn more about the topic at hand 30-seconds-of-code": {
    "prefix": "harticles You learn more about the topic at hand 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Presenting a topic requires meticulous **research** in order for you to be able to write down the most interesting and relevant findings. This process will uncover any **gaps in your knowledge** of said topic, gaps your research will in turn have to cover. I've seen this numerous times in the past while doing research both for this website as well as tasks at work and it always holds true. If nothing else, you will gain a **deeper understanding** of whatever it is you are presenting, which will be useful sometime in the future. In the case of my task, I understood more about the business logic, how premature optimizations got in the way of stability and why it was so hard to consistently reach the desired state, as I discovered a hidden layer of complexity I didn't know about before.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles You discover the root of the problem 30-seconds-of-code": {
    "prefix": "harticles You discover the root of the problem 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Most of the time we assume to know the problem well enough to try and solve it. A lot of the time, I've found out, I know a lot less than I originally thought about the domain, the problem and, more importantly, the root cause of it. Again, **presenting the problem to a reader** will put you through the process of having to **explain it** and boil it down to the key details. This more often than not results in a concise description of whatever is at the **root of the problem**. Working on my design document, I figured out that the root of the problem was essentially a set of bad assumptions that kept piling up and had some mismatches between the backend and frontend code.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles You understand past decisions 30-seconds-of-code": {
    "prefix": "harticles You understand past decisions 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "This one applies to problems you aren't the first one to tackle, but might still be relevant in other situations. As you go you will come across whatever **implementation details** you didn't know about. If you take a closer look, you'll figure out how those came to be in the first place and **why those decisions were made** in the past. Understanding the reasons behind past decisions is crucial in figuring out if the original set of needs, restrictions and assumptions is still valid and how to amend them if necessary. As I was already knee-deep in this task, I realized that the decisions we made almost one year prior were valid at the time, decisions I didn't fully understand back then. A couple of them, however, didn't seem to stand the test of time as business needs changed and we'd have to update them accordingly.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles You come up with more varied solutions 30-seconds-of-code": {
    "prefix": "harticles You come up with more varied solutions 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Understanding past decisions, covering the gaps in your knowledge and boiling down the problem to a concise description you should already be a lot more informed about the topic you are researching than before. Hopefully at this stage, you will have an itch to try **a different solution** from the one you originally envisioned or you'll have come up with a solution where there was none. More varied solutions are always better because you can **compare tradeoffs** and get a better understanding of what's best. In my case, I ended up considering a solution I had mostly dismissed originally. And it was that solution which made the most sense to me in the end, even though it was more radical than the one I was planning to propose originally.\r",
      "\r",
      "As a closing thought, try writing even if nobody is going to read it. Write it for you. It will help you understand, explain, reason about and tackle the task all at once. It's not a waste of time, it's a powerful tool you could leverage from time to time.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles DNS Definition 30-seconds-of-code": {
    "prefix": "harticles DNS Definition 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The Domain Name System (abbreviated to DNS), translates human-readable domain names (e.g www.google.com to machine-readable IP addresses (e.g. 142.250.186.46).\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles DNS Records 30-seconds-of-code": {
    "prefix": "harticles DNS Records 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "A DNS is made up of multiple records of different types, each one with its own purpose. Here's a breakdown of the most commonly-used ones:\r",
      "\r",
      "- **A record**: The address record. Used to map a domain name to an IPv4 address. Similarly, the **AAAA record** is used to map a domain name to an IPv6 address.\r",
      "- **CNAME records**: A canonical name record. Creates an alias that points to another domain or subdomain, but never an IP address.\r",
      "- **ANAME record**: Allows you to point the root of your domain to a hostname or a domain name.\r",
      "- **TXT records**: Allow the addition of limited text notes and is often used for ownership verification purposes, validation or security.\r",
      "- **MX record**: Specifies the mail server responsible for accepting the incoming and outgoing emails for a domain. Should point to a mail server name, not an IP address.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Debug 30-seconds-of-code": {
    "prefix": "harticles Debug 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The most common exit ramp comes up when you end up in debugging mode. Oftentimes a tutorial can be outdated or something in the setup can be just a tiny bit different. At this point, you have to figure out how to solve the issue to proceed.\r",
      "\r",
      "Entering debugging mode, you realize that **you know only a part of the big picture**. What you don't know might not be immediately obvious, but with perseverance you will be able to figure it out. At that point, you can start looking for answers to solve the issue.\r",
      "\r",
      "Debugging a problem offers a little bit of **exposure to the underlying technologies and concepts**. This way you can dip your toe into whatever it is you are working with, without getting overwhelmed.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Be curious 30-seconds-of-code": {
    "prefix": "harticles Be curious 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Curiosity killed the cat, but not you. Stop every step of the way to ask what it is you are learning. Do you understand the concepts? Do you know what it is you are building? Is this tool your only option? What problem does it solve? Are there others?\r",
      "\r",
      "Questions are a valuable tool to help you explore the landscape. You don't necessarily need to answer them all, nor do you need to read tons of documentation or articles about a topic. Simply **taking a peek at the big picture** and **asking questions** is enough. You can always come back later and dive deeper.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Experiment 30-seconds-of-code": {
    "prefix": "harticles Experiment 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The third and best way to escape tutorial hell is to experiment. After you finish a couple of tutorials, **put your skills to the test**. Try to build something from scratch, looking up anything you need to, as you go. It won't be as easy or as fast as the tutorial was, but you'll learn a lot more.\r",
      "\r",
      "After you build a project, **take another look**. Figure out what you could have done differently or what parts of it you don't understand well enough. Refine it, polish up parts of it, add new features. The more time you put into it, the better you will become.\r",
      "\r",
      "Then do it a few more times and experiment with a few more ideas. As soon as you start working on your own projects and get into a rhythm, it's a lot easier to learn new things. Some slopes will be steeper and others will be more gentle. But you will feel much **more confident in your skills** than blindly following tutorials.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Learn your own way 30-seconds-of-code": {
    "prefix": "harticles Learn your own way 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "As a closing suggestion, I want to urge you to **find your own learning style**. Tutorials might be right for some and I don't suggest you dismiss them entirely. After all, we all have to start somewhere. But if they don't work for you, **mix it up a bit**. Try reading the documentation, solving coding exercises or tinkering with an existing project. Everyone is different and there's no one size fits all when it comes to learning.\r",
      "\r",
      "For some, much like myself, teaching is the best learning experience. After all, if you can't explain something simply, you probably don't understand it well enough. Explaining, then, can lead you to researching, debugging, experimenting and being curious all at once. And teaching, much like learning, can be done in many many different ways.\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles 1xx - Informational 30-seconds-of-code": {
    "prefix": "harticles 1xx - Informational 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- **100**: Continue - Everything is ok so far\r",
      "- **102**: Processing - Request is being processed, no response available yet\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles 2xx - Success 30-seconds-of-code": {
    "prefix": "harticles 2xx - Success 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- **200**: OK - Request successful\r",
      "- **201**: Created - Request fulfilled, new resource has been created\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles 3xx - Redirection 30-seconds-of-code": {
    "prefix": "harticles 3xx - Redirection 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- **301**: Moved Permanently - Resource permanently moved to a new URL\r",
      "- **302**: Moved Temporarily - Resource temporarily moved to a new URL\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles 4xx - Client Error 30-seconds-of-code": {
    "prefix": "harticles 4xx - Client Error 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- **400**: Bad Request - Server cannot understand and process the request\r",
      "- **401**: Unauthorized - Authentication required, user not yet authenticated\r",
      "- **403**: Forbidden - Insufficient access permissions to the resource\r",
      "- **404**: Not Found - Requested resource not found\r",
      "- **410**: Gone - Request no longer available due to intentional removal\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles 5xx - Server Error 30-seconds-of-code": {
    "prefix": "harticles 5xx - Server Error 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- **500**: Internal Server Error - Generic unhandled server error\r",
      "- **502**: Bad Gateway - Gateway server got an invalid response\r",
      "- **503**: Service Unavailable - Server temporarily unable to handle request\r",
      "- **504**: Gateway Timeout - Gateway server didn't get a response in time\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Definition 30-seconds-of-code": {
    "prefix": "harticles Definition 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The term itself comes from a metaphor, in which the team's lack of understanding about the codebase leads to continuous disagreement. Continuously stumbling upon this situation slows down progress, feeling like paying interest on a loan.\r",
      "\r",
      "**Technical debt is effectively the natural result of writing code about something we don't have a proper understanding of.**\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Causes 30-seconds-of-code": {
    "prefix": "harticles Causes 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "But what causes technical debt in the first place? As hinted at by the previous definition, it arises from a **disagreement between business needs and how the software was written**. The root cause for such disagreements can either appear early on or later down the line.\r",
      "\r",
      "In the former case, a lack of understanding might have lead to laying the foundations incorrectly, therefore carrying the debt from the start. Poor design choices, lack of foresight and a lack of communication between the team members can all lead to this.\r",
      "\r",
      "In the latter case, the debt might have been incurred due to a change in the business requirements, which the software was not designed to handle. This is often the case with projects that move rapidly, making it hard to adapt to the changing needs.\r",
      "\r",
      "Interestingly enough, poor code and not following best practices only account for a portion of technical debt. This means that, while following best practices and writing clean code can help reduce the debt, they are usually not the main cause.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Symptoms 30-seconds-of-code": {
    "prefix": "harticles Symptoms 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "So, how do you know if you have accumulated technical debt? It's not that hard to spot most of the time. **Lowered productivity** is usually one of the first signs. This translates to increased development time or effort estimates that are not met. This makes sense intuitively, as maintenance costs mount up and the codebase is not as easy to work with as it should be.\r",
      "\r",
      "Following lowered productivity, teams with accumulated technical debt might start to notice **decreased code quality**. When estimates are not met, developers might be tempted to cut corners and write code that is not as clean as it should be. This is a natural reaction to the pressure of meeting deadlines, but it can have a negative impact on the codebase in the long run.\r",
      "\r",
      "Finally, this spirals into a vicious cycle, as the codebase becomes harder to work with, which leads to more pressure, **lowered morale** and even more technical debt. This is why it's important to spot the symptoms early on and take action to reduce it.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "harticles Solutions 30-seconds-of-code": {
    "prefix": "harticles Solutions 30-seconds-of-code",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Dealing with technical debt is not always easy, but it's not impossible either. The most important step is realizing that it exists and that it affects the team's productivity. Once that is done, the team can start to take action. Solutions vary, depending on the team, industry and nature of the technical debt itself.\r",
      "\r",
      "Broadly speaking, it's acceptable to **take on debt early on** to get the project off the ground. Identifying and keeping track of it ensures that the team knows where to start when the time comes to start dealing with it. This also helps figure out how much of an impact it has and how to prioritize maintenance tasks.\r",
      "\r",
      "As soon as the project is out of the door, the team should **start to reduce debt** or at least not take on any more. Prioritization can be based either on the impact or the effort required for each refactor. A combination of two can also be beneficial, as it can allow small maintenance tasks to fill in the gaps, while more impactful refactors are planned and coordinated accordingly.\r",
      "\r",
      "After getting to a manageable level, it's important to **keep technical debt in check**. Here's where having a process in place can work wonders. By knowing how to keep debt in check, when to take action and continuously working towards that goal, the team can ensure that the codebase is always in a good state.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/30-seconds/30-seconds-of-code"
  }
}