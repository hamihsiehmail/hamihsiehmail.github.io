{
  "hjs Motivation modern-js-cheatsheet": {
    "prefix": "hjs Motivation modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "This document is a cheatsheet for JavaScript you will frequently encounter in modern projects and most contemporary sample code.\r",
      "\r",
      "This guide is not intended to teach you JavaScript from the ground up, but to help developers with basic knowledge who may struggle to get familiar with modern codebases (or let's say to learn React for instance) because of the JavaScript concepts used.\r",
      "\r",
      "Besides, I will sometimes provide personal tips that may be debatable but will take care to mention that it's a personal recommendation when I do so.\r",
      "\r",
      "> **Note:** Most of the concepts introduced here are coming from a JavaScript language update (ES2015, often called ES6). You can find new features added by this update [here](http://es6-features.org); it's very well done.\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Complementary Resources modern-js-cheatsheet": {
    "prefix": "hjs Complementary Resources modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "When you struggle to understand a notion, I suggest you look for answers on the following resources:\r",
      "\r",
      "- [MDN (Mozilla Developer Network)](https://developer.mozilla.org/en-US/search?q=)\r",
      "- [You don't know JS (book)](https://github.com/getify/You-Dont-Know-JS)\r",
      "- [Eloquent JavaScript (book)](https://eloquentjavascript.net)\r",
      "- [Douglas Crockford's blog](https://www.crockford.com/javascript/)\r",
      "- [ES6 Features with examples](http://es6-features.org)\r",
      "- [Wes Bos blog (ES6)](https://wesbos.com/javascript)\r",
      "- [Javascript Basics for Beginners](https://www.udacity.com/course/javascript-basics--ud804) - a free Udacity course\r",
      "- [Reddit (JavaScript)](https://www.reddit.com/r/javascript/)\r",
      "- [Google](https://www.google.com/) to find specific blog and resources\r",
      "- [StackOverflow](https://stackoverflow.com/questions/tagged/javascript)\r",
      "\r",
      "## Table of Contents\r",
      "\r",
      "- [Modern JavaScript cheatsheet](#modern-javascript-cheatsheet)\r",
      "  - [Introduction](#introduction)\r",
      "    - [Motivation](#motivation)\r",
      "    - [Complementary resources](#complementary-resources)\r",
      "  - [Table of contents](#table-of-contents)\r",
      "  - [Notions](#notions)\r",
      "    - [Variable declaration: var, const, let](#variable-declaration-var-const-let)\r",
      "      - [Short explanation](#short-explanation)\r",
      "      - [Sample code](#sample-code)\r",
      "      - [Detailed explanation](#detailed-explanation)\r",
      "      - [External resource](#external-resource)\r",
      "    - [Arrow function](#-arrow-function)\r",
      "      - [Sample code](#sample-code-1)\r",
      "      - [Detailed explanation](#detailed-explanation-1)\r",
      "        - [Concision](#concision)\r",
      "        - [_this_ reference](#this-reference)\r",
      "      - [Useful resources](#useful-resources)\r",
      "    - [Function default parameter value](#function-default-parameter-value)\r",
      "      - [External resource](#external-resource-1)\r",
      "    - [Destructuring objects and arrays](#destructuring-objects-and-arrays)\r",
      "      - [Explanation with sample code](#explanation-with-sample-code)\r",
      "      - [Useful resources](#useful-resources-1)\r",
      "    - [Array methods - map / filter / reduce](#array-methods---map--filter--reduce--find)\r",
      "      - [Sample code](#sample-code-2)\r",
      "      - [Explanation](#explanation)\r",
      "        - [Array.prototype.map()](#arrayprototypemap)\r",
      "        - [Array.prototype.filter()](#arrayprototypefilter)\r",
      "        - [Array.prototype.reduce()](#arrayprototypereduce)\r",
      "        - [Array.prototype.find()](#arrayprototypefind)\r",
      "      - [External Resource](#external-resource-2)\r",
      "    - [Spread operator \"...\"](#spread-operator-)\r",
      "      - [Sample code](#sample-code-3)\r",
      "      - [Explanation](#explanation-1)\r",
      "        - [In iterables (like arrays)](#in-iterables-like-arrays)\r",
      "        - [Function rest parameter](#function-rest-parameter)\r",
      "        - [Object properties spreading](#object-properties-spreading)\r",
      "      - [External resources](#external-resources)\r",
      "    - [Object property shorthand](#object-property-shorthand)\r",
      "      - [Explanation](#explanation-2)\r",
      "      - [External resources](#external-resources-1)\r",
      "    - [Promises](#promises)\r",
      "      - [Sample code](#sample-code-4)\r",
      "      - [Explanation](#explanation-3)\r",
      "        - [Create the promise](#create-the-promise)\r",
      "        - [Promise handlers usage](#promise-handlers-usage)\r",
      "      - [External Resources](#external-resources-2)\r",
      "    - [Template literals](#template-literals)\r",
      "      - [Sample code](#sample-code-5)\r",
      "      - [External resources](#external-resources-3)\r",
      "    - [Tagged Template Literals](#tagged-template-literals)\r",
      "      - [External resources](#external-resources-4)\r",
      "    - [Imports / Exports](#imports--exports)\r",
      "      - [Explanation with sample code](#explanation-with-sample-code-1)\r",
      "        - [Named exports](#named-exports)\r",
      "        - [Default import / export](#default-import--export)\r",
      "      - [External resources](#external-resources-5)\r",
      "    - [JavaScript _this_](#-javascript-this)\r",
      "      - [External resources](#external-resources-6)\r",
      "    - [Class](#class)\r",
      "      - [Samples](#samples)\r",
      "      - [External resources](#external-resources-7)\r",
      "    - [Extends and super keywords](#extends-and-super-keywords)\r",
      "      - [Sample Code](#sample-code-6)\r",
      "      - [External Resources](#external-resources-8)\r",
      "    - [Async Await](#async-await)\r",
      "      - [Sample code](#sample-code-7)\r",
      "      - [Explanation with sample code](#explanation-with-sample-code-2)\r",
      "      - [Error handling](#error-handling)\r",
      "      - [External resources](#external-resources-9)\r",
      "    - [Truthy / Falsy](#truthy--falsy)\r",
      "      - [External resources](#external-resources-10)\r",
      "    - [Anamorphisms / Catamporphisms](#anamorphisms-and-catamorphisms)\r",
      "      - [Anamorphisms](#anamorphisms)\r",
      "      - [Catamorphisms](#catamorphisms)\r",
      "      - [External resources](#external-resources-11)\r",
      "    - [Generators](#generators)\r",
      "      - [External resources](#external-resources-12)\r",
      "    - [Static Methods](#static-methods)\r",
      "      - [Short Explanation](#short-explanation-1)\r",
      "      - [Sample Code](#sample-code-8)\r",
      "      - [Detailed Explanation](#detailed-explanation-2)\r",
      "        - [Calling other static methods from a static method](#calling-other-static-methods-from-a-static-method)\r",
      "        - [Calling static methods from non-static methods](#calling-static-methods-from-non-static-methods)\r",
      "      - [External resources](#external-resources-13)\r",
      "  - [Glossary](#glossary)\r",
      "    - [Scope](#-scope)\r",
      "    - [Variable mutation](#-variable-mutation)\r",
      "\r",
      "## Notions\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Variable declaration: var, const, let modern-js-cheatsheet": {
    "prefix": "hjs Variable declaration: var, const, let modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In JavaScript, there are three keywords available to declare a variable, and each has its differences. Those are `var`, `let` and `const`.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Short explanation modern-js-cheatsheet": {
    "prefix": "hjs Short explanation modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The `static` keyword is used in classes to declare static methods. Static methods are functions in a class that belongs to the class object and are not available to any instance of that class.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Sample code modern-js-cheatsheet": {
    "prefix": "hjs Sample code modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "```js\r",
      "class Repo {\r",
      "  static getName() {\r",
      "    return \"Repo name is modern-js-cheatsheet\";\r",
      "  }\r",
      "}\r",
      "\r",
      "// Note that we did not have to create an instance of the Repo class\r",
      "console.log(Repo.getName()); // Repo name is modern-js-cheatsheet\r",
      "\r",
      "let r = new Repo();\r",
      "console.log(r.getName()); // Uncaught TypeError: r.getName is not a function\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Detailed explanation modern-js-cheatsheet": {
    "prefix": "hjs Detailed explanation modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Static methods can be called within another static method by using the `this` keyword, this doesn't work for non-static methods though. Non-static methods cannot directly access static methods using the `this` keyword.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs var modern-js-cheatsheet": {
    "prefix": "hjs var modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`var` declared variables are _function scoped_, meaning that when a variable is created in a function, everything in that function can access that variable. Besides, a _function scoped_ variable created in a function can't be accessed outside this function.\r",
      "\r",
      "I recommend you to picture it as if an _X scoped_ variable meant that this variable was a property of X.\r",
      "\r",
      "```javascript\r",
      "function myFunction() {\r",
      "  var myVar = \"Nick\";\r",
      "  console.log(myVar); // \"Nick\" - myVar is accessible inside the function\r",
      "}\r",
      "console.log(myVar); // Throws a ReferenceError, myVar is not accessible outside the function.\r",
      "```\r",
      "\r",
      "Still focusing on the variable scope, here is a more subtle example:\r",
      "\r",
      "```javascript\r",
      "function myFunction() {\r",
      "  var myVar = \"Nick\";\r",
      "  if (true) {\r",
      "    var myVar = \"John\";\r",
      "    console.log(myVar); // \"John\"\r",
      "    // actually, myVar being function scoped, we just erased the previous myVar value \"Nick\" for \"John\"\r",
      "  }\r",
      "  console.log(myVar); // \"John\" - see how the instructions in the if block affected this value\r",
      "}\r",
      "console.log(myVar); // Throws a ReferenceError, myVar is not accessible outside the function.\r",
      "```\r",
      "\r",
      "Besides, _var_ declared variables are moved to the top of the scope at execution. This is what we call [var hoisting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting).\r",
      "\r",
      "This portion of code:\r",
      "\r",
      "```js\r",
      "console.log(myVar); // undefined -- no error raised\r",
      "var myVar = 2;\r",
      "```\r",
      "\r",
      "is understood at execution like:\r",
      "\r",
      "```js\r",
      "var myVar;\r",
      "console.log(myVar); // undefined -- no error raised\r",
      "myVar = 2;\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs let modern-js-cheatsheet": {
    "prefix": "hjs let modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`var` and `let ` are about the same, but `let` declared variables\r",
      "\r",
      "- are _block scoped_\r",
      "- are **not** accessible before they are assigned\r",
      "- can't be re-declared in the same scope\r",
      "\r",
      "Let's see the impact of block-scoping taking our previous example:\r",
      "\r",
      "```javascript\r",
      "function myFunction() {\r",
      "  let myVar = \"Nick\";\r",
      "  if (true) {\r",
      "    let myVar = \"John\";\r",
      "    console.log(myVar); // \"John\"\r",
      "    // actually, myVar being block scoped, we just created a new variable myVar.\r",
      "    // this variable is not accessible outside this block and totally independent\r",
      "    // from the first myVar created !\r",
      "  }\r",
      "  console.log(myVar); // \"Nick\", see how the instructions in the if block DID NOT affect this value\r",
      "}\r",
      "console.log(myVar); // Throws a ReferenceError, myVar is not accessible outside the function.\r",
      "```\r",
      "\r",
      "<a name=\"tdz_sample\"></a> Now, what it means for _let_ (and _const_) variables for not being accessible before being assigned:\r",
      "\r",
      "```js\r",
      "console.log(myVar); // raises a ReferenceError !\r",
      "let myVar = 2;\r",
      "```\r",
      "\r",
      "By contrast with _var_ variables, if you try to read or write on a _let_ or _const_ variable before they are assigned an error will be raised. This phenomenon is often called [_Temporal dead zone_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_Dead_Zone_and_errors_with_let) or _TDZ_.\r",
      "\r",
      "> **Note:** Technically, _let_ and _const_ variables declarations are being hoisted too, but not their assignation. Since they're made so that they can't be used before assignation, it intuitively feels like there is no hoisting, but there is. Find out more on this [very detailed explanation here](http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified) if you want to know more.\r",
      "\r",
      "In addition, you can't re-declare a _let_ variable:\r",
      "\r",
      "```js\r",
      "let myVar = 2;\r",
      "let myVar = 3; // Raises a SyntaxError\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs const modern-js-cheatsheet": {
    "prefix": "hjs const modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`const` declared variables behave like _let_ variables, but also they can't be reassigned.\r",
      "\r",
      "To sum it up, _const_ variables:\r",
      "\r",
      "- are _block scoped_\r",
      "- are not accessible before being assigned\r",
      "- can't be re-declared in the same scope\r",
      "- can't be reassigned\r",
      "\r",
      "```js\r",
      "const myVar = \"Nick\";\r",
      "myVar = \"John\"; // raises an error, reassignment is not allowed\r",
      "```\r",
      "\r",
      "```js\r",
      "const myVar = \"Nick\";\r",
      "const myVar = \"John\"; // raises an error, re-declaration is not allowed\r",
      "```\r",
      "\r",
      "<a name=\"const_mutable_sample\"></a> But there is a subtlety : `const` variables are not [**immutable**](#mutation_def) ! Concretely, it means that _object_ and _array_ `const` declared variables **can** be mutated.\r",
      "\r",
      "For objects:\r",
      "\r",
      "```js\r",
      "const person = {\r",
      "  name: \"Nick\",\r",
      "};\r",
      "person.name = \"John\"; // this will work ! person variable is not completely reassigned, but mutated\r",
      "console.log(person.name); // \"John\"\r",
      "person = \"Sandra\"; // raises an error, because reassignment is not allowed with const declared variables\r",
      "```\r",
      "\r",
      "For arrays:\r",
      "\r",
      "```js\r",
      "const person = [];\r",
      "person.push(\"John\"); // this will work ! person variable is not completely reassigned, but mutated\r",
      "console.log(person[0]); // \"John\"\r",
      "person = [\"Nick\"]; // raises an error, because reassignment is not allowed with const declared variables\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs External resource modern-js-cheatsheet": {
    "prefix": "hjs External resource modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- [Default parameter value - ES6 Features](http://es6-features.org/#DefaultParameterValues)\r",
      "- [Default parameters - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs <a name=\"arrow_func_concept\"></a> Arrow function modern-js-cheatsheet": {
    "prefix": "hjs <a name=\"arrow_func_concept\"></a> Arrow function modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The ES6 JavaScript update has introduced _arrow functions_, which is another way to declare and use functions. Here are the benefits they bring:\r",
      "\r",
      "- More concise\r",
      "- _this_ is picked up from surroundings\r",
      "- implicit return\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Concision modern-js-cheatsheet": {
    "prefix": "hjs Concision modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Arrow functions are more concise than traditional functions in many ways. Let's review all the possible cases:\r",
      "\r",
      "- Implicit VS Explicit return\r",
      "\r",
      "An **explicit return** is a function where the _return_ keyword is used in its body.\r",
      "\r",
      "```js\r",
      "function double(x) {\r",
      "  return x * 2; // this function explicitly returns x * 2, *return* keyword is used\r",
      "}\r",
      "```\r",
      "\r",
      "In the traditional way of writing functions, the return was always explicit. But with arrow functions, you can do _implicit return_ which means that you don't need to use the keyword _return_ to return a value.\r",
      "\r",
      "```js\r",
      "const double = (x) => {\r",
      "  return x * 2; // Explicit return here\r",
      "};\r",
      "```\r",
      "\r",
      "Since this function only returns something (no instructions before the _return_ keyword) we can do an implicit return.\r",
      "\r",
      "```js\r",
      "const double = (x) => x * 2; // Correct, returns x*2\r",
      "```\r",
      "\r",
      "To do so, we only need to **remove the brackets** and the **return** keyword. That's why it's called an _implicit_ return, the _return_ keyword is not there, but this function will indeed return `x * 2`.\r",
      "\r",
      "> **Note:** If your function does not return a value (with _side effects_), it doesn't do an explicit nor an implicit return.\r",
      "\r",
      "Besides, if you want to implicitly return an _object_ you **must have parentheses around it** since it will conflict with the block braces:\r",
      "\r",
      "```js\r",
      "const getPerson = () => ({ name: \"Nick\", age: 24 });\r",
      "console.log(getPerson()); // { name: \"Nick\", age: 24 } -- object implicitly returned by arrow function\r",
      "```\r",
      "\r",
      "- Only one argument\r",
      "\r",
      "If your function only takes one parameter, you can omit the parentheses around it. If we take back the above _double_ code:\r",
      "\r",
      "```js\r",
      "const double = (x) => x * 2; // this arrow function only takes one parameter\r",
      "```\r",
      "\r",
      "Parentheses around the parameter can be avoided:\r",
      "\r",
      "```js\r",
      "const double = (x) => x * 2; // this arrow function only takes one parameter\r",
      "```\r",
      "\r",
      "- No arguments\r",
      "\r",
      "When there is no argument provided to an arrow function, you need to provide parentheses, or it won't be valid syntax.\r",
      "\r",
      "```js\r",
      "() => {\r",
      "  // parentheses are provided, everything is fine\r",
      "  const x = 2;\r",
      "  return x;\r",
      "};\r",
      "```\r",
      "\r",
      "```js\r",
      "  => { // No parentheses, this won't work!\r",
      "    const x = 2;\r",
      "    return x;\r",
      "  }\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs _this_ reference modern-js-cheatsheet": {
    "prefix": "hjs _this_ reference modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To understand this subtlety introduced with arrow functions, you must know how [this](#this_def) behaves in JavaScript.\r",
      "\r",
      "In an arrow function, _this_ is equal to the _this_ value of the enclosing execution context. What it means is that an arrow function doesn't create a new _this_, it grabs it from its surrounding instead.\r",
      "\r",
      "Without arrow function, if you wanted to access a variable from _this_ in a function inside a function, you had to use the _that = this_ or _self = this_ trick.\r",
      "\r",
      "For instance, using setTimeout function inside myFunc:\r",
      "\r",
      "```js\r",
      "function myFunc() {\r",
      "  this.myVar = 0;\r",
      "  var that = this; // that = this trick\r",
      "  setTimeout(function () {\r",
      "    // A new *this* is created in this function scope\r",
      "    that.myVar++;\r",
      "    console.log(that.myVar); // 1\r",
      "\r",
      "    console.log(this.myVar); // undefined -- see function declaration above\r",
      "  }, 0);\r",
      "}\r",
      "```\r",
      "\r",
      "But with arrow function, _this_ is taken from its surrounding:\r",
      "\r",
      "```js\r",
      "function myFunc() {\r",
      "  this.myVar = 0;\r",
      "  setTimeout(() => {\r",
      "    // this taken from surrounding, meaning myFunc here\r",
      "    this.myVar++;\r",
      "    console.log(this.myVar); // 1\r",
      "  }, 0);\r",
      "}\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Useful resources modern-js-cheatsheet": {
    "prefix": "hjs Useful resources modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- [ES6 Features - Destructuring Assignment](http://es6-features.org/#ArrayMatching)\r",
      "- [Destructuring Objects - WesBos](http://wesbos.com/destructuring-objects/)\r",
      "- [ExploringJS - Destructuring](http://exploringjs.com/es6/ch_destructuring.html)\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Function default parameter value modern-js-cheatsheet": {
    "prefix": "hjs Function default parameter value modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Starting from ES2015 JavaScript update, you can set default value to your function parameters using the following syntax:\r",
      "\r",
      "```js\r",
      "function myFunc(x = 10) {\r",
      "  return x;\r",
      "}\r",
      "console.log(myFunc()); // 10 -- no value is provided so x default value 10 is assigned to x in myFunc\r",
      "console.log(myFunc(5)); // 5 -- a value is provided so x is equal to 5 in myFunc\r",
      "\r",
      "console.log(myFunc(undefined)); // 10 -- undefined value is provided so default value is assigned to x\r",
      "console.log(myFunc(null)); // null -- a value (null) is provided, see below for more details\r",
      "```\r",
      "\r",
      "The default parameter is applied in two and only two situations:\r",
      "\r",
      "- No parameter provided\r",
      "- _undefined_ parameter provided\r",
      "\r",
      "In other words, if you pass in _null_ the default parameter **won't be applied**.\r",
      "\r",
      "> **Note:** Default value assignment can be used with destructured parameters as well (see next notion to see an example)\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Destructuring objects and arrays modern-js-cheatsheet": {
    "prefix": "hjs Destructuring objects and arrays modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "_Destructuring_ is a convenient way of creating new variables by extracting some values from data stored in objects or arrays.\r",
      "\r",
      "To name a few use cases, _destructuring_ can be used to destructure function parameters or _this.props_ in React projects for instance.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Explanation with sample code modern-js-cheatsheet": {
    "prefix": "hjs Explanation with sample code modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "_Async / Await_ is built on promises but they allow a more imperative style of code.\r",
      "\r",
      "The _async_ operator marks a function as asynchronous and will always return a _Promise_. You can use the _await_ operator in an _async_ function to pause execution on that line until the returned Promise from the expression either resolves or rejects.\r",
      "\r",
      "```js\r",
      "async function myFunc() {\r",
      "  // we can use await operator because this function is async\r",
      "  return \"hello world\";\r",
      "}\r",
      "\r",
      "myFunc().then((msg) => console.log(msg)); // \"hello world\" -- myFunc's return value is turned into a promise because of async operator\r",
      "```\r",
      "\r",
      "When the _return_ statement of an async function is reached, the Promise is fulfilled with the value returned. If an error is thrown inside an async function, the Promise state will turn to _rejected_. If no value is returned from an async function, a Promise is still returned and resolves with no value when execution of the async function is complete.\r",
      "\r",
      "_await_ operator is used to wait for a _Promise_ to be fulfilled and can only be used inside an _async_ function body. When encountered, the code execution is paused until the promise is fulfilled.\r",
      "\r",
      "> **Note :** _fetch_ is a function that returns a Promise that allows to do an AJAX request\r",
      "\r",
      "Let's see how we could fetch a github user with promises first:\r",
      "\r",
      "```js\r",
      "function getGithubUser(username) {\r",
      "  return fetch(`https://api.github.com/users/${username}`).then((response) => response.json());\r",
      "}\r",
      "\r",
      "getGithubUser(\"mbeaudru\")\r",
      "  .then((user) => console.log(user))\r",
      "  .catch((err) => console.log(err));\r",
      "```\r",
      "\r",
      "Here's the _async / await_ equivalent:\r",
      "\r",
      "```js\r",
      "async function getGithubUser(username) {\r",
      "  // promise + await keyword usage allowed\r",
      "  const response = await fetch(`https://api.github.com/users/${username}`); // Execution stops here until fetch promise is fulfilled\r",
      "  return response.json();\r",
      "}\r",
      "\r",
      "getGithubUser(\"mbeaudru\")\r",
      "  .then((user) => console.log(user))\r",
      "  .catch((err) => console.log(err));\r",
      "```\r",
      "\r",
      "_async / await_ syntax is particularly convenient when you need to chain promises that are interdependent.\r",
      "\r",
      "For instance, if you need to get a token in order to be able to fetch a blog post on a database and then the author informations:\r",
      "\r",
      "> **Note :** _await_ expressions needs to be wrapped in parentheses to call its resolved value's methods and properties on the same line.\r",
      "\r",
      "```js\r",
      "async function fetchPostById(postId) {\r",
      "  const token = (await fetch(\"token_url\")).json().token;\r",
      "  const post = (await fetch(`/posts/${postId}?token=${token}`)).json();\r",
      "  const author = (await fetch(`/users/${post.authorId}`)).json();\r",
      "\r",
      "  post.author = author;\r",
      "  return post;\r",
      "}\r",
      "\r",
      "fetchPostById(\"gzIrzeo64\")\r",
      "  .then((post) => console.log(post))\r",
      "  .catch((err) => console.log(err));\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Array methods - map / filter / reduce / find modern-js-cheatsheet": {
    "prefix": "hjs Array methods - map / filter / reduce / find modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "_Map_, _filter_, _reduce_ and _find_ are array methods that are coming from a programming paradigm named [_functional programming_](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0).\r",
      "\r",
      "To sum it up:\r",
      "\r",
      "- **Array.prototype.map()** takes an array, does something on its elements and returns an array with the transformed elements.\r",
      "- **Array.prototype.filter()** takes an array, decides element by element if it should keep it or not and returns an array with the kept elements only\r",
      "- **Array.prototype.reduce()** takes an array and aggregates the elements into a single value (which is returned)\r",
      "- **Array.prototype.find()** takes an array, and returns the first element that satisfies the provided condition.\r",
      "\r",
      "I recommend to use them as much as possible in following the principles of functional programming because they are composable, concise and elegant.\r",
      "\r",
      "With those four methods, you can avoid the use of _for_ and _forEach_ loops in most situations. When you are tempted to do a _for_ loop, try to do it with _map_, _filter_, _reduce_ and _find_ composed. You might struggle to do it at first because it requires you to learn a new way of thinking, but once you've got it things get easier.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Explanation modern-js-cheatsheet": {
    "prefix": "hjs Explanation modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "When you do an _Ajax request_ the response is not synchronous because you want a resource that takes some time to come. It even may never come if the resource you have requested is unavailable for some reason (404).\r",
      "\r",
      "To handle that kind of situation, ES2015 has given us _promises_. Promises can have three different states:\r",
      "\r",
      "- Pending\r",
      "- Fulfilled\r",
      "- Rejected\r",
      "\r",
      "Let's say we want to use promises to handle an Ajax request to fetch the resource X.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Array.prototype.map() modern-js-cheatsheet": {
    "prefix": "hjs Array.prototype.map() modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "```js\r",
      "const doubledNumbers = numbers.map(function (n) {\r",
      "  return n * 2;\r",
      "});\r",
      "console.log(doubledNumbers); // [0, 2, 4, 6, 8, 10, 12]\r",
      "```\r",
      "\r",
      "What's happening here? We are using .map on the _numbers_ array, the map is iterating on each element of the array and passes it to our function. The goal of the function is to produce and return a new value from the one passed so that map can replace it.\r",
      "\r",
      "Let's extract this function to make it more clear, just for this once:\r",
      "\r",
      "```js\r",
      "const doubleN = function (n) {\r",
      "  return n * 2;\r",
      "};\r",
      "const doubledNumbers = numbers.map(doubleN);\r",
      "console.log(doubledNumbers); // [0, 2, 4, 6, 8, 10, 12]\r",
      "```\r",
      "\r",
      "**Note** : You will frequently encounter this method used in combination with [arrow functions](#-arrow-function)\r",
      "\r",
      "```js\r",
      "const doubledNumbers = numbers.map((n) => n * 2);\r",
      "console.log(doubledNumbers); // [0, 2, 4, 6, 8, 10, 12]\r",
      "```\r",
      "\r",
      "`numbers.map(doubleN)` produces `[doubleN(0), doubleN(1), doubleN(2), doubleN(3), doubleN(4), doubleN(5), doubleN(6)]` which is equal to `[0, 2, 4, 6, 8, 10, 12]`.\r",
      "\r",
      "> **Note:** If you do not need to return a new array and just want to do a loop that has side effects, you might just want to use a for / forEach loop instead of a map.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Array.prototype.filter() modern-js-cheatsheet": {
    "prefix": "hjs Array.prototype.filter() modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "```js\r",
      "const evenNumbers = numbers.filter(function (n) {\r",
      "  return n % 2 === 0; // true if \"n\" is par, false if \"n\" isn't\r",
      "});\r",
      "console.log(evenNumbers); // [0, 2, 4, 6]\r",
      "```\r",
      "\r",
      "**Note** : You will frequently encounter this method used in combination with [arrow functions](#-arrow-function)\r",
      "\r",
      "```js\r",
      "const evenNumbers = numbers.filter((n) => n % 2 === 0);\r",
      "console.log(evenNumbers); // [0, 2, 4, 6]\r",
      "```\r",
      "\r",
      "We are using .filter on the _numbers_ array, filter is iterating on each element of the array and passes it to our function. The goal of the function is to return a boolean that will determine whether the current value will be kept or not. Filter then returns the array with only the kept values.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Array.prototype.reduce() modern-js-cheatsheet": {
    "prefix": "hjs Array.prototype.reduce() modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The reduce method goal is to _reduce_ all elements of the array it iterates on into a single value. How it aggregates those elements is up to you.\r",
      "\r",
      "```js\r",
      "const sum = numbers.reduce(\r",
      "  function (acc, n) {\r",
      "    return acc + n;\r",
      "  },\r",
      "  0 // accumulator variable value at first iteration step\r",
      ");\r",
      "\r",
      "console.log(sum); // 21\r",
      "```\r",
      "\r",
      "**Note** : You will frequently encounter this method used in combination with [arrow functions](#-arrow-function)\r",
      "\r",
      "```js\r",
      "const sum = numbers.reduce((acc, n) => acc + n, 0);\r",
      "console.log(sum); // 21\r",
      "```\r",
      "\r",
      "Just like for .map and .filter methods, .reduce is applied on an array and takes a function as the first parameter.\r",
      "\r",
      "This time though, there are changes:\r",
      "\r",
      "- .reduce takes two parameters\r",
      "\r",
      "The first parameter is a function that will be called at each iteration step.\r",
      "\r",
      "The second parameter is the value of the accumulator variable (_acc_ here) at the first iteration step (read next point to understand).\r",
      "\r",
      "- Function parameters\r",
      "\r",
      "The function you pass as the first parameter of .reduce takes two parameters. The first one (_acc_ here) is the accumulator variable, whereas the second parameter (_n_) is the current element.\r",
      "\r",
      "The accumulator variable is equal to the return value of your function at the **previous** iteration step. At the first step of the iteration, _acc_ is equal to the value you passed as .reduce second parameter.\r",
      "\r",
      "###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs At first iteration step modern-js-cheatsheet": {
    "prefix": "hjs At first iteration step modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`acc = 0` because we passed in 0 as the second parameter for reduce\r",
      "\r",
      "`n = 0` first element of the _number_ array\r",
      "\r",
      "Function returns _acc_ + _n_ --> 0 + 0 --> 0\r",
      "\r",
      "###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs At second iteration step modern-js-cheatsheet": {
    "prefix": "hjs At second iteration step modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`acc = 0` because it's the value the function returned at the previous iteration step\r",
      "\r",
      "`n = 1` second element of the _number_ array\r",
      "\r",
      "Function returns _acc_ + _n_ --> 0 + 1 --> 1\r",
      "\r",
      "###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs At third iteration step modern-js-cheatsheet": {
    "prefix": "hjs At third iteration step modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`acc = 1` because it's the value the function returned at the previous iteration step\r",
      "\r",
      "`n = 2` third element of the _number_ array\r",
      "\r",
      "Function returns _acc_ + _n_ --> 1 + 2 --> 3\r",
      "\r",
      "###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs At fourth iteration step modern-js-cheatsheet": {
    "prefix": "hjs At fourth iteration step modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`acc = 3` because it's the value the function returned at the previous iteration step\r",
      "\r",
      "`n = 3` fourth element of the _number_ array\r",
      "\r",
      "Function returns _acc_ + _n_ --> 3 + 3 --> 6\r",
      "\r",
      "###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs [...] At last iteration step modern-js-cheatsheet": {
    "prefix": "hjs [...] At last iteration step modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "`acc = 15` because it's the value the function returned at the previous iteration step\r",
      "\r",
      "`n = 6` last element of the _number_ array\r",
      "\r",
      "Function returns _acc_ + _n_ --> 15 + 6 --> 21\r",
      "\r",
      "As it is the last iteration step, **.reduce** returns 21.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Array.prototype.find() modern-js-cheatsheet": {
    "prefix": "hjs Array.prototype.find() modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "```js\r",
      "const greaterThanZero = numbers.find(function (n) {\r",
      "  return n > 0; // return number just greater than 0 is present\r",
      "});\r",
      "console.log(greaterThanZero); // 1\r",
      "```\r",
      "\r",
      "**Note** : You will frequently encounter this method used in combination with [arrow functions](#-arrow-function)\r",
      "\r",
      "We are using .find on the _numbers_ array, .find is iterating on each element of the array and passes it to our function, until the condition is met. The goal of the function is to return the element that satisfies the current testing function. The .find method executes the callback function once for each index of the array until the callback returns a truthy value.\r",
      "\r",
      "**Note** : It immediately returns the value of that element (that satisfies the condition) if found. Otherwise, returns undefined.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs External Resource modern-js-cheatsheet": {
    "prefix": "hjs External Resource modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- [Understanding map / filter / reduce in JS](https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464)\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Spread operator \"...\" modern-js-cheatsheet": {
    "prefix": "hjs Spread operator \"...\" modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The spread operator `...` has been introduced with ES2015 and is used to expand elements of an iterable (like an array) into places where multiple elements can fit.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs In iterables (like arrays) modern-js-cheatsheet": {
    "prefix": "hjs In iterables (like arrays) modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "If we have the two following arrays:\r",
      "\r",
      "```js\r",
      "const arr1 = [\"a\", \"b\", \"c\"];\r",
      "const arr2 = [arr1, \"d\", \"e\", \"f\"]; // [[\"a\", \"b\", \"c\"], \"d\", \"e\", \"f\"]\r",
      "```\r",
      "\r",
      "_arr2_ the first element is an array because _arr1_ is injected as is into _arr2_. But what we want is _arr2_ to be an array of letters. To do so, we can _spread_ the elements of _arr1_ into _arr2_.\r",
      "\r",
      "With spread operator\r",
      "\r",
      "```js\r",
      "const arr1 = [\"a\", \"b\", \"c\"];\r",
      "const arr2 = [...arr1, \"d\", \"e\", \"f\"]; // [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Function rest parameter modern-js-cheatsheet": {
    "prefix": "hjs Function rest parameter modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In function parameters, we can use the rest operator to inject parameters into an array we can loop in. There is already an **arguments** object bound to every function that is equal to an array of all the parameters passed into the function.\r",
      "\r",
      "```js\r",
      "function myFunc() {\r",
      "  for (var i = 0; i < arguments.length; i++) {\r",
      "    console.log(arguments[i]);\r",
      "  }\r",
      "}\r",
      "\r",
      "myFunc(\"Nick\", \"Anderson\", 10, 12, 6);\r",
      "// \"Nick\"\r",
      "// \"Anderson\"\r",
      "// 10\r",
      "// 12\r",
      "// 6\r",
      "```\r",
      "\r",
      "But let's say that we want this function to create a new student with its grades and with its average grade. Wouldn't it be more convenient to extract the first two parameters into two separate variables, and then have all the grades in an array we can iterate over?\r",
      "\r",
      "That's exactly what the rest operator allows us to do!\r",
      "\r",
      "```js\r",
      "function createStudent(firstName, lastName, ...grades) {\r",
      "  // firstName = \"Nick\"\r",
      "  // lastName = \"Anderson\"\r",
      "  // [10, 12, 6] -- \"...\" takes all other parameters passed and creates a \"grades\" array variable that contains them\r",
      "\r",
      "  const avgGrade = grades.reduce((acc, curr) => acc + curr, 0) / grades.length; // computes average grade from grades\r",
      "\r",
      "  return {\r",
      "    firstName: firstName,\r",
      "    lastName: lastName,\r",
      "    grades: grades,\r",
      "    avgGrade: avgGrade,\r",
      "  };\r",
      "}\r",
      "\r",
      "const student = createStudent(\"Nick\", \"Anderson\", 10, 12, 6);\r",
      "console.log(student);\r",
      "// {\r",
      "//   firstName: \"Nick\",\r",
      "//   lastName: \"Anderson\",\r",
      "//   grades: [10, 12, 6],\r",
      "//   avgGrade: 9,33\r",
      "// }\r",
      "```\r",
      "\r",
      "> **Note:** createStudent function is bad because we don't check if grades.length exists or is different from 0. But it's easier to read this way, so I didn't handle this case.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Object properties spreading modern-js-cheatsheet": {
    "prefix": "hjs Object properties spreading modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "For this one, I recommend you read previous explanations about the rest operator on iterables and function parameters.\r",
      "\r",
      "```js\r",
      "const myObj = { x: 1, y: 2, a: 3, b: 4 };\r",
      "const { x, y, ...z } = myObj; // object destructuring here\r",
      "console.log(x); // 1\r",
      "console.log(y); // 2\r",
      "console.log(z); // { a: 3, b: 4 }\r",
      "\r",
      "// z is the rest of the object destructured: myObj object minus x and y properties destructured\r",
      "\r",
      "const n = { x, y, ...z };\r",
      "console.log(n); // { x: 1, y: 2, a: 3, b: 4 }\r",
      "\r",
      "// Here z object properties are spread into n\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs External resources modern-js-cheatsheet": {
    "prefix": "hjs External resources modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- [static keyword- MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)\r",
      "- [Static Methods- Javascript.info](https://javascript.info/class#static-methods)\r",
      "- [Static Members in ES6- OdeToCode](http://odetocode.com/blogs/scott/archive/2015/02/02/static-members-in-es6.aspx)\r",
      "\r",
      "## Glossary\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Object property shorthand modern-js-cheatsheet": {
    "prefix": "hjs Object property shorthand modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "When assigning a variable to an object property, if the variable name is equal to the property name, you can do the following:\r",
      "\r",
      "```js\r",
      "const x = 10;\r",
      "const myObj = { x };\r",
      "console.log(myObj.x); // 10\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Promises modern-js-cheatsheet": {
    "prefix": "hjs Promises modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "A promise is an object which can be returned synchronously from an asynchronous function ([ref](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261#3cd0)).\r",
      "\r",
      "Promises can be used to avoid [callback hell](http://callbackhell.com/), and they are more and more frequently encountered in modern JavaScript projects.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Create the promise modern-js-cheatsheet": {
    "prefix": "hjs Create the promise modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "We firstly are going to create a promise. We will use the jQuery get method to do our Ajax request to X.\r",
      "\r",
      "```js\r",
      "const xFetcherPromise = new Promise(function (resolve, reject) { // Create promise using \"new\" keyword and store it into a variable\r",
      "  // Promise constructor takes a function parameter which has resolve and reject parameters itself\r",
      "  $.get(\"X\") // Launch the Ajax request\r",
      "    .done(function (X) {\r",
      "      // Once the request is done...\r",
      "      resolve(X); // ... resolve the promise with the X value as parameter\r",
      "    })\r",
      "    .fail(function (error) {\r",
      "      // If the request has failed...\r",
      "      reject(error); // ... reject the promise with the error as parameter\r",
      "    });\r",
      "});\r",
      "```\r",
      "\r",
      "As seen in the above sample, the Promise object takes an _executor_ function which takes two parameters **resolve** and **reject**. Those parameters are functions which when called are going to move the promise _pending_ state to respectively a _fulfilled_ and _rejected_ state.\r",
      "\r",
      "The promise is in pending state after instance creation and its _executor_ function is executed immediately. Once one of the function _resolve_ or _reject_ is called in the _executor_ function, the promise will call its associated handlers.\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Promise handlers usage modern-js-cheatsheet": {
    "prefix": "hjs Promise handlers usage modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To get the promise result (or error), we must attach to it handlers by doing the following:\r",
      "\r",
      "```js\r",
      "xFetcherPromise\r",
      "  .then(function (X) {\r",
      "    console.log(X);\r",
      "  })\r",
      "  .catch(function (err) {\r",
      "    console.log(err);\r",
      "  });\r",
      "```\r",
      "\r",
      "If the promise succeeds, _resolve_ is executed and the function passed as `.then` parameter is executed.\r",
      "\r",
      "If it fails, _reject_ is executed and the function passed as `.catch` parameter is executed.\r",
      "\r",
      "> **Note :** If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached. [(Ref: MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#Description)\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs External Resources modern-js-cheatsheet": {
    "prefix": "hjs External Resources modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "- [Extends - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends)\r",
      "- [Super operator - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)\r",
      "- [Inheritance - MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance)\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Template literals modern-js-cheatsheet": {
    "prefix": "hjs Template literals modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Template literals is an [_expression interpolation_](https://en.wikipedia.org/wiki/String_interpolation) for single and multiple-line strings.\r",
      "\r",
      "In other words, it is a new string syntax in which you can conveniently use any JavaScript expressions (variables for instance).\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Tagged template literals modern-js-cheatsheet": {
    "prefix": "hjs Tagged template literals modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Template tags are _functions that can be prefixed to a [template literal](#template-literals)_. When a function is called this way, the first parameter is an array of the _strings_ that appear between the template's interpolated variables, and the subsequent parameters are the interpolated values. Use a spread operator `...` to capture all of them. [(Ref: MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals).\r",
      "\r",
      "> **Note :** A famous library named [styled-components](https://www.styled-components.com/) heavily relies on this feature.\r",
      "\r",
      "Below is a toy example on how they work.\r",
      "\r",
      "```js\r",
      "function highlight(strings, ...values) {\r",
      "  const interpolation = strings.reduce((prev, current) => {\r",
      "    return prev + current + (values.length ? \"<mark>\" + values.shift() + \"</mark>\" : \"\");\r",
      "  }, \"\");\r",
      "\r",
      "  return interpolation;\r",
      "}\r",
      "\r",
      "const condiment = \"jam\";\r",
      "const meal = \"toast\";\r",
      "\r",
      "highlight`I like ${condiment} on ${meal}.`;\r",
      "// \"I like <mark>jam</mark> on <mark>toast</mark>.\"\r",
      "```\r",
      "\r",
      "A more interesting example:\r",
      "\r",
      "```js\r",
      "function comma(strings, ...values) {\r",
      "  return strings.reduce((prev, next) => {\r",
      "    let value = values.shift() || [];\r",
      "    value = value.join(\", \");\r",
      "    return prev + next + value;\r",
      "  }, \"\");\r",
      "}\r",
      "\r",
      "const snacks = [\"apples\", \"bananas\", \"cherries\"];\r",
      "comma`I like ${snacks} to snack on.`;\r",
      "// \"I like apples, bananas, cherries to snack on.\"\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Imports / Exports modern-js-cheatsheet": {
    "prefix": "hjs Imports / Exports modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "ES6 modules are used to access variables or functions in a module explicitly exported by the modules it imports.\r",
      "\r",
      "I highly recommend to take a look at MDN resources on import/export (see external resources below), it is both straightforward and complete.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Named exports modern-js-cheatsheet": {
    "prefix": "hjs Named exports modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Named exports are used to export several values from a module.\r",
      "\r",
      "> **Note :** You can only name-export [first-class citizens](https://en.wikipedia.org/wiki/First-class_citizen) that have a name.\r",
      "\r",
      "```js\r",
      "// mathConstants.js\r",
      "export const pi = 3.14;\r",
      "export const exp = 2.7;\r",
      "export const alpha = 0.35;\r",
      "\r",
      "// -------------\r",
      "\r",
      "// myFile.js\r",
      "import { pi, exp } from \"./mathConstants.js\"; // Named import -- destructuring-like syntax\r",
      "console.log(pi); // 3.14\r",
      "console.log(exp); // 2.7\r",
      "\r",
      "// -------------\r",
      "\r",
      "// mySecondFile.js\r",
      "import * as constants from \"./mathConstants.js\"; // Inject all exported values into constants variable\r",
      "console.log(constants.pi); // 3.14\r",
      "console.log(constants.exp); // 2.7\r",
      "```\r",
      "\r",
      "While named imports looks like _destructuring_, they have a different syntax and are not the same. They don't support default values nor _deep_ destructuring.\r",
      "\r",
      "Besides, you can do aliases but the syntax is different from the one used in destructuring:\r",
      "\r",
      "```js\r",
      "import { foo as bar } from \"myFile.js\"; // foo is imported and injected into a new bar variable\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Default import / export modern-js-cheatsheet": {
    "prefix": "hjs Default import / export modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Concerning the default export, there is only a single default export per module. A default export can be a function, a class, an object or anything else. This value is considered the \"main\" exported value since it will be the simplest to import. [Ref: MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Description)\r",
      "\r",
      "```js\r",
      "// coolNumber.js\r",
      "const ultimateNumber = 42;\r",
      "export default ultimateNumber;\r",
      "\r",
      "// ------------\r",
      "\r",
      "// myFile.js\r",
      "import number from \"./coolNumber.js\";\r",
      "// Default export, independently from its name, is automatically injected into number variable;\r",
      "console.log(number); // 42\r",
      "```\r",
      "\r",
      "Function exporting:\r",
      "\r",
      "```js\r",
      "// sum.js\r",
      "export default function sum(x, y) {\r",
      "  return x + y;\r",
      "}\r",
      "// -------------\r",
      "\r",
      "// myFile.js\r",
      "import sum from \"./sum.js\";\r",
      "const result = sum(1, 2);\r",
      "console.log(result); // 3\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs <a name=\"this_def\"></a> JavaScript _this_ modern-js-cheatsheet": {
    "prefix": "hjs <a name=\"this_def\"></a> JavaScript _this_ modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "_this_ operator behaves differently than in other languages and is in most cases determined by how a function is called. ([Ref: MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)).\r",
      "\r",
      "This notion is having many subtleties and being quite hard, I highly suggest you to deep dive in the external resources below. Thus, I will provide what I personally have in mind to determine what _this_ is equal to. I have learned this tip from [this article written by Yehuda Katz](http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/).\r",
      "\r",
      "```js\r",
      "function myFunc() {\r",
      "  ...\r",
      "}\r",
      "\r",
      "// After each statement, you find the value of *this* in myFunc\r",
      "\r",
      "myFunc.call(\"myString\", \"hello\") // \"myString\" -- first .call parameter value is injected into *this*\r",
      "\r",
      "// In non-strict-mode\r",
      "myFunc(\"hello\") // window -- myFunc() is syntax sugar for myFunc.call(window, \"hello\")\r",
      "\r",
      "// In strict-mode\r",
      "myFunc(\"hello\") // undefined -- myFunc() is syntax sugar for myFunc.call(undefined, \"hello\")\r",
      "```\r",
      "\r",
      "```js\r",
      "var person = {\r",
      "  myFunc: function() { ... }\r",
      "}\r",
      "\r",
      "person.myFunc.call(person, \"test\") // person Object -- first call parameter is injected into *this*\r",
      "person.myFunc(\"test\") // person Object -- person.myFunc() is syntax sugar for person.myFunc.call(person, \"test\")\r",
      "\r",
      "var myBoundFunc = person.myFunc.bind(\"hello\") // Creates a new function in which we inject \"hello\" in *this* value\r",
      "person.myFunc(\"test\") // person Object -- The bind method has no effect on the original method\r",
      "myBoundFunc(\"test\") // \"hello\" -- myBoundFunc is person.myFunc with \"hello\" bound to *this*\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Class modern-js-cheatsheet": {
    "prefix": "hjs Class modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "JavaScript is a [prototype-based](https://en.wikipedia.org/wiki/Prototype-based_programming) language (whereas Java is [class-based](https://en.wikipedia.org/wiki/Class-based_programming) language, for instance). ES6 has introduced JavaScript classes which are meant to be a syntactic sugar for prototype-based inheritance and **not** a new class-based inheritance model ([ref](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)).\r",
      "\r",
      "The word _class_ is indeed error prone if you are familiar with classes in other languages. If you do, avoid assuming how JavaScript classes work on this basis and consider it an entirely different notion.\r",
      "\r",
      "Since this document is not an attempt to teach you the language from the ground up, I will assume you know what prototypes are and how they behave. If you do not, see the external resources listed below the sample code.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Samples modern-js-cheatsheet": {
    "prefix": "hjs Samples modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Before ES6, prototype syntax:\r",
      "\r",
      "```js\r",
      "var Person = function (name, age) {\r",
      "  this.name = name;\r",
      "  this.age = age;\r",
      "};\r",
      "Person.prototype.stringSentence = function () {\r",
      "  return \"Hello, my name is \" + this.name + \" and I'm \" + this.age;\r",
      "};\r",
      "```\r",
      "\r",
      "With ES6 class syntax:\r",
      "\r",
      "```js\r",
      "class Person {\r",
      "  constructor(name, age) {\r",
      "    this.name = name;\r",
      "    this.age = age;\r",
      "  }\r",
      "\r",
      "  stringSentence() {\r",
      "    return `Hello, my name is ${this.name} and I am ${this.age}`;\r",
      "  }\r",
      "}\r",
      "\r",
      "const myPerson = new Person(\"Manu\", 23);\r",
      "console.log(myPerson.age); // 23\r",
      "console.log(myPerson.stringSentence()); // \"Hello, my name is Manu and I'm 23\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs `Extends` and `super` keywords modern-js-cheatsheet": {
    "prefix": "hjs `Extends` and `super` keywords modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The `extends` keyword is used in class declarations or class expressions to create a class which is a child of another class ([Ref: MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends)). The subclass inherits all the properties of the superclass and additionally can add new properties or modify the inherited ones.\r",
      "\r",
      "The `super` keyword is used to call functions on an object's parent, including its constructor.\r",
      "\r",
      "- `super` keyword must be used before the `this` keyword is used in constructor\r",
      "- Invoking `super()` calls the parent class constructor. If you want to pass some arguments in a class's constructor to its parent's constructor, you call it with `super(arguments)`.\r",
      "- If the parent class have a method (even static) called `X`, you can use `super.X()` to call it in a child class.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Sample Code modern-js-cheatsheet": {
    "prefix": "hjs Sample Code modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "```js\r",
      "class Polygon {\r",
      "  constructor(height, width) {\r",
      "    this.name = \"Polygon\";\r",
      "    this.height = height;\r",
      "    this.width = width;\r",
      "  }\r",
      "\r",
      "  getHelloPhrase() {\r",
      "    return `Hi, I am a ${this.name}`;\r",
      "  }\r",
      "}\r",
      "\r",
      "class Square extends Polygon {\r",
      "  constructor(length) {\r",
      "    // Here, it calls the parent class' constructor with lengths\r",
      "    // provided for the Polygon's width and height\r",
      "    super(length, length);\r",
      "    // Note: In derived classes, super() must be called before you\r",
      "    // can use 'this'. Leaving this out will cause a reference error.\r",
      "    this.name = \"Square\";\r",
      "    this.length = length;\r",
      "  }\r",
      "\r",
      "  getCustomHelloPhrase() {\r",
      "    const polygonPhrase = super.getHelloPhrase(); // accessing parent method with super.X() syntax\r",
      "    return `${polygonPhrase} with a length of ${this.length}`;\r",
      "  }\r",
      "\r",
      "  get area() {\r",
      "    return this.height * this.width;\r",
      "  }\r",
      "}\r",
      "\r",
      "const mySquare = new Square(10);\r",
      "console.log(mySquare.area); // 100\r",
      "console.log(mySquare.getHelloPhrase()); // 'Hi, I am a Square' -- Square inherits from Polygon and has access to its methods\r",
      "console.log(mySquare.getCustomHelloPhrase()); // 'Hi, I am a Square with a length of 10'\r",
      "```\r",
      "\r",
      "**Note :** If we had tried to use `this` before calling `super()` in Square class, a ReferenceError would have been raised:\r",
      "\r",
      "```js\r",
      "class Square extends Polygon {\r",
      "  constructor(length) {\r",
      "    this.height; // ReferenceError, super needs to be called first!\r",
      "\r",
      "    // Here, it calls the parent class' constructor with lengths\r",
      "    // provided for the Polygon's width and height\r",
      "    super(length, length);\r",
      "\r",
      "    // Note: In derived classes, super() must be called before you\r",
      "    // can use 'this'. Leaving this out will cause a reference error.\r",
      "    this.name = \"Square\";\r",
      "  }\r",
      "}\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Async Await modern-js-cheatsheet": {
    "prefix": "hjs Async Await modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In addition to [Promises](#promises), there is a new syntax you might encounter to handle asynchronous code named _async / await_.\r",
      "\r",
      "The purpose of async/await functions is to simplify the behavior of using promises synchronously and to perform some behavior on a group of Promises. Just as Promises are similar to structured callbacks, async/await is similar to combining generators and promises. Async functions _always_ return a Promise. ([Ref: MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function))\r",
      "\r",
      "> **Note :** You must understand what promises are and how they work before trying to understand async / await since they rely on it.\r",
      "\r",
      "> **Note 2:** [_await_ must be used in an _async_ function](https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9#f3f0), which means that you can't use await in the top level of our code since that is not inside an async function.\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Error handling modern-js-cheatsheet": {
    "prefix": "hjs Error handling modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Unless we add _try / catch_ blocks around _await_ expressions, uncaught exceptions – regardless of whether they were thrown in the body of your _async_ function or while it’s suspended during _await_ – will reject the promise returned by the _async_ function. Using the `throw` statement in an async function is the same as returning a Promise that rejects. [(Ref: PonyFoo)](https://ponyfoo.com/articles/understanding-javascript-async-await#error-handling).\r",
      "\r",
      "> **Note :** Promises behave the same!\r",
      "\r",
      "With promises, here is how you would handle the error chain:\r",
      "\r",
      "```js\r",
      "function getUser() {\r",
      "  // This promise will be rejected!\r",
      "  return new Promise((res, rej) => rej(\"User not found !\"));\r",
      "}\r",
      "\r",
      "function getAvatarByUsername(userId) {\r",
      "  return getUser(userId).then((user) => user.avatar);\r",
      "}\r",
      "\r",
      "function getUserAvatar(username) {\r",
      "  return getAvatarByUsername(username).then((avatar) => ({ username, avatar }));\r",
      "}\r",
      "\r",
      "getUserAvatar(\"mbeaudru\")\r",
      "  .then((res) => console.log(res))\r",
      "  .catch((err) => console.log(err)); // \"User not found !\"\r",
      "```\r",
      "\r",
      "The equivalent with _async / await_:\r",
      "\r",
      "```js\r",
      "async function getUser() { // The returned promise will be rejected!\r",
      "  throw \"User not found !\";\r",
      "}\r",
      "\r",
      "async function getAvatarByUsername(userId) => {\r",
      "  const user = await getUser(userId);\r",
      "  return user.avatar;\r",
      "}\r",
      "\r",
      "async function getUserAvatar(username) {\r",
      "  var avatar = await getAvatarByUsername(username);\r",
      "  return { username, avatar };\r",
      "}\r",
      "\r",
      "getUserAvatar('mbeaudru')\r",
      "  .then(res => console.log(res))\r",
      "  .catch(err => console.log(err)); // \"User not found !\"\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Truthy / Falsy modern-js-cheatsheet": {
    "prefix": "hjs Truthy / Falsy modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "In JavaScript, a truthy or falsy value is a value that is being casted into a boolean when evaluated in a boolean context. An example of boolean context would be the evaluation of an `if` condition:\r",
      "\r",
      "Every value will be casted to `true` unless they are equal to:\r",
      "\r",
      "- `false`\r",
      "- `0`\r",
      "- `\"\"` (empty string)\r",
      "- `null`\r",
      "- `undefined`\r",
      "- `NaN`\r",
      "\r",
      "Here are examples of _boolean context_:\r",
      "\r",
      "- `if` condition evaluation\r",
      "\r",
      "```js\r",
      "if (myVar) {\r",
      "}\r",
      "```\r",
      "\r",
      "`myVar` can be any [first-class citizen](https://en.wikipedia.org/wiki/First-class_citizen) (variable, function, boolean) but it will be casted into a boolean because it's evaluated in a boolean context.\r",
      "\r",
      "- After logical **NOT** `!` operator\r",
      "\r",
      "This operator returns false if its single operand can be converted to true; otherwise, returns true.\r",
      "\r",
      "```js\r",
      "!0; // true -- 0 is falsy so it returns true\r",
      "!!0; // false -- 0 is falsy so !0 returns true so !(!0) returns false\r",
      "!!\"\"; // false -- empty string is falsy so NOT (NOT false) equals false\r",
      "```\r",
      "\r",
      "- With the _Boolean_ object constructor\r",
      "\r",
      "```js\r",
      "new Boolean(0); // false\r",
      "new Boolean(1); // true\r",
      "```\r",
      "\r",
      "- In a ternary evaluation\r",
      "\r",
      "```js\r",
      "myVar ? \"truthy\" : \"falsy\";\r",
      "```\r",
      "\r",
      "myVar is evaluated in a boolean context.\r",
      "\r",
      "Be careful when comparing 2 values. The object values (that should be cast to true) is **not** being casted to Boolean but it forced to convert into a primitive value one using [ToPrimitives specification](http://javascript.info/object-toprimitive). Internally, when an object is compared to Boolean value like `[] == true`, it does `[].toString() == true` so...\r",
      "\r",
      "```js\r",
      "let a = [] == true; // a is false since [].toString() give \"\" back.\r",
      "let b = [1] == true; // b is true since [1].toString() give \"1\" back.\r",
      "let c = [2] == true; // c is false since [2].toString() give \"2\" back.\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Anamorphisms and Catamorphisms modern-js-cheatsheet": {
    "prefix": "hjs Anamorphisms and Catamorphisms modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Anamorphisms modern-js-cheatsheet": {
    "prefix": "hjs Anamorphisms modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Anamorphisms are functions that map from some object to a more complex structure containing the type of the object. It is the process of _unfolding_ a simple structure into a more complex one. Consider unfolding an integer to a list of integers. The integer is our initial object and the list of integers is the more complex structure.\r",
      "\r",
      "**Sample code**\r",
      "\r",
      "```js\r",
      "function downToOne(n) {\r",
      "  const list = [];\r",
      "\r",
      "  for (let i = n; i > 0; --i) {\r",
      "    list.push(i);\r",
      "  }\r",
      "\r",
      "  return list;\r",
      "}\r",
      "\r",
      "downToOne(5);\r",
      "//=> [ 5, 4, 3, 2, 1 ]\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Catamorphisms modern-js-cheatsheet": {
    "prefix": "hjs Catamorphisms modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Catamorphisms are the opposite of Anamorphisms, in that they take objects of more complex structure and _fold_ them into simpler structures. Take the following example `product` which take a list of integers and returns a single integer.\r",
      "\r",
      "**Sample code**\r",
      "\r",
      "```js\r",
      "function product(list) {\r",
      "  let product = 1;\r",
      "\r",
      "  for (const n of list) {\r",
      "    product = product * n;\r",
      "  }\r",
      "\r",
      "  return product;\r",
      "}\r",
      "\r",
      "product(downToOne(5)); // 120\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Generators modern-js-cheatsheet": {
    "prefix": "hjs Generators modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Another way to write the `downToOne` function is to use a Generator. To instantiate a `Generator` object, one must use the `function *` declaration. Generators are functions that can be exited and later re-entered with its context (variable bindings) saved across re-entrances.\r",
      "\r",
      "For example, the `downToOne` function above can be rewritten as:\r",
      "\r",
      "```js\r",
      "function* downToOne(n) {\r",
      "  for (let i = n; i > 0; --i) {\r",
      "    yield i;\r",
      "  }\r",
      "}\r",
      "\r",
      "[...downToOne(5)]; // [ 5, 4, 3, 2, 1 ]\r",
      "```\r",
      "\r",
      "Generators return an iterable object. When the iterator's `next()` function is called, it is executed until the first `yield` expression, which specifies the value to be returned from the iterator or with `yield*`, which delegates to another generator function. When a `return` expression is called in the generator, it will mark the generator as done and pass back as the return value. Further calls to `next()` will not return any new values.\r",
      "\r",
      "**Sample code**\r",
      "\r",
      "```js\r",
      "// Yield Example\r",
      "function* idMaker() {\r",
      "  var index = 0;\r",
      "  while (index < 2) {\r",
      "    yield index;\r",
      "    index = index + 1;\r",
      "  }\r",
      "}\r",
      "\r",
      "var gen = idMaker();\r",
      "\r",
      "gen.next().value; // 0\r",
      "gen.next().value; // 1\r",
      "gen.next().value; // undefined\r",
      "```\r",
      "\r",
      "The `yield*` expression enables a generator to call another generator function during iteration.\r",
      "\r",
      "```js\r",
      "// Yield * Example\r",
      "function* genB(i) {\r",
      "  yield i + 1;\r",
      "  yield i + 2;\r",
      "  yield i + 3;\r",
      "}\r",
      "\r",
      "function* genA(i) {\r",
      "  yield i;\r",
      "  yield* genB(i);\r",
      "  yield i + 10;\r",
      "}\r",
      "\r",
      "var gen = genA(10);\r",
      "\r",
      "gen.next().value; // 10\r",
      "gen.next().value; // 11\r",
      "gen.next().value; // 12\r",
      "gen.next().value; // 13\r",
      "gen.next().value; // 20\r",
      "```\r",
      "\r",
      "```js\r",
      "// Generator Return Example\r",
      "function* yieldAndReturn() {\r",
      "  yield \"Y\";\r",
      "  return \"R\";\r",
      "  yield \"unreachable\";\r",
      "}\r",
      "\r",
      "var gen = yieldAndReturn();\r",
      "gen.next(); // { value: \"Y\", done: false }\r",
      "gen.next(); // { value: \"R\", done: true }\r",
      "gen.next(); // { value: undefined, done: true }\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Static Methods modern-js-cheatsheet": {
    "prefix": "hjs Static Methods modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Calling other static methods from a static method. modern-js-cheatsheet": {
    "prefix": "hjs Calling other static methods from a static method. modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To call a static method from another static method, the `this` keyword can be used like so;\r",
      "\r",
      "```js\r",
      "class Repo {\r",
      "  static getName() {\r",
      "    return \"Repo name is modern-js-cheatsheet\";\r",
      "  }\r",
      "\r",
      "  static modifyName() {\r",
      "    return this.getName() + \"-added-this\";\r",
      "  }\r",
      "}\r",
      "\r",
      "console.log(Repo.modifyName()); // Repo name is modern-js-cheatsheet-added-this\r",
      "```\r",
      "\r",
      "##"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Calling static methods from non-static methods. modern-js-cheatsheet": {
    "prefix": "hjs Calling static methods from non-static methods. modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Non-static methods can call static methods in 2 ways;\r",
      "\r",
      "1. ###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Using the class name. modern-js-cheatsheet": {
    "prefix": "hjs Using the class name. modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "To get access to a static method from a non-static method we use the class name and call the static method like a property. e.g `ClassName.StaticMethodName`\r",
      "\r",
      "```js\r",
      "class Repo {\r",
      "  static getName() {\r",
      "    return \"Repo name is modern-js-cheatsheet\";\r",
      "  }\r",
      "\r",
      "  useName() {\r",
      "    return Repo.getName() + \" and it contains some really important stuff\";\r",
      "  }\r",
      "}\r",
      "\r",
      "// we need to instantiate the class to use non-static methods\r",
      "let r = new Repo();\r",
      "console.log(r.useName()); // Repo name is modern-js-cheatsheet and it contains some really important stuff\r",
      "```\r",
      "\r",
      "2. ###"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs Using the constructor modern-js-cheatsheet": {
    "prefix": "hjs Using the constructor modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "Static methods can be called as properties on the constructor object.\r",
      "\r",
      "```js\r",
      "class Repo {\r",
      "  static getName() {\r",
      "    return \"Repo name is modern-js-cheatsheet\";\r",
      "  }\r",
      "\r",
      "  useName() {\r",
      "    // Calls the static method as a property of the constructor\r",
      "    return this.constructor.getName() + \" and it contains some really important stuff\";\r",
      "  }\r",
      "}\r",
      "\r",
      "// we need to instantiate the class to use non-static methods\r",
      "let r = new Repo();\r",
      "console.log(r.useName()); // Repo name is modern-js-cheatsheet and it contains some really important stuff\r",
      "```\r",
      "\r",
      "#"
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs <a name=\"scope_def\"></a> Scope modern-js-cheatsheet": {
    "prefix": "hjs <a name=\"scope_def\"></a> Scope modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "The context in which values and expressions are \"visible,\" or can be referenced. If a variable or other expression is not \"in the current scope,\" then it is unavailable for use.\r",
      "\r",
      "Source: [MDN](https://developer.mozilla.org/en-US/docs/Glossary/Scope)\r",
      "\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  },
  "hjs <a name=\"mutation_def\"></a> Variable mutation modern-js-cheatsheet": {
    "prefix": "hjs <a name=\"mutation_def\"></a> Variable mutation modern-js-cheatsheet",
    "type": "md",
    "isCode": false,
    "body": [
      "\r",
      "A variable is said to have been mutated when its initial value has changed afterward.\r",
      "\r",
      "```js\r",
      "var myArray = [];\r",
      "myArray.push(\"firstEl\"); // myArray is being mutated\r",
      "```\r",
      "\r",
      "A variable is said to be _immutable_ if it can't be mutated.\r",
      "\r",
      "[Check MDN Mutable article](https://developer.mozilla.org/en-US/docs/Glossary/Mutable) for more details.\r",
      ""
    ],
    "description": "https://github.com/mbeaudru/modern-js-cheatsheet"
  }
}